{"version":3,"sources":["index.js","cloudbase.js","functions\\index.js","utils\\httpRequest.js","utils\\tracing.js","utils\\utils.js","const\\code.js","const\\symbol.js","utils\\request.js","utils\\requestHook.js","utils\\getWxCloudApiToken.js","..\\package.json","auth\\index.js","wx\\index.js","storage\\index.js","utils\\dbRequest.js","log\\index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA,ACHA;AHUA,ACHA,AFMA,AGTA,ACHA;AHUA,ACHA,AFMA,AGTA,ACHA;AHUA,ACHA,AFMA,AGTA,ACHA,ACHA;AJaA,ACHA,AFMA,AGTA,ACHA,ACHA;AJaA,ACHA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,ACHA,ALeA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,ACHA,ALeA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,ACHA,ALeA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,ACHA,ALeA,AFMA,AGTA,AKfA,AJYA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,AKfA,AJYA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,AKfA,AJYA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,AKfA,ACHA,ALeA,ACHA;AJaA,AKfA,AJYA,ACHA,AKfA,ACHA,ALeA,ACHA;AJaA,AKfA,AJYA,ACHA,AKfA,ACHA,ALeA,ACHA;AJaA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AJaA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AJaA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,AV8BA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,AV8BA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,AV8BA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AYpCA,AJYA,APqBA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AYpCA,AJYA,APqBA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AYpCA,AXiCA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AYpCA,ACHA,AZoCA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AYpCA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,AYpCA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA;AMjBA,AV8BA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst cloudbase_1 = require(\"./cloudbase\");\nconst symbol_1 = require(\"./const/symbol\");\nconst tcb_admin_node_1 = __importDefault(require(\"tcb-admin-node\"));\nmodule.exports = {\n    init: (config) => {\n        if (config) {\n            const { _useFeature } = config;\n            if (_useFeature === false) {\n                // 设置用老实例\n                return tcb_admin_node_1.default.init(config);\n            }\n        }\n        return new cloudbase_1.CloudBase(config);\n    },\n    parseContext: (context) => {\n        // 校验context 是否正确\n        return cloudbase_1.CloudBase.parseContext(context);\n    },\n    /**\n     * 云函数下获取当前env\n     */\n    SYMBOL_CURRENT_ENV: symbol_1.SYMBOL_CURRENT_ENV\n};\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst database_1 = require(\"@cloudbase/database\");\nconst functions_1 = require(\"./functions\");\nconst auth_1 = require(\"./auth\");\nconst wx_1 = require(\"./wx\");\nconst storage_1 = require(\"./storage\");\nconst dbRequest_1 = require(\"./utils/dbRequest\");\nconst log_1 = require(\"./log\");\nconst code_1 = require(\"./const/code\");\nconst utils_1 = require(\"./utils/utils\");\nconst tcb_admin_node_1 = __importDefault(require(\"tcb-admin-node\"));\nconst GRAY_ENV_KEY = 'TCB_SDK_GRAY_0';\nclass CloudBase {\n    constructor(config) {\n        this.init(config);\n    }\n    static parseContext(context) {\n        if (typeof context !== 'object') {\n            throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_CONTEXT), { message: 'context 必须为对象类型' }));\n        }\n        let { memory_limit_in_mb, time_limit_in_ms, request_id, environ, function_version, namespace, function_name, environment } = context;\n        let parseResult = {};\n        try {\n            parseResult.memoryLimitInMb = memory_limit_in_mb;\n            parseResult.timeLimitIns = time_limit_in_ms;\n            parseResult.requestId = request_id;\n            parseResult.functionVersion = function_version;\n            parseResult.namespace = namespace;\n            parseResult.functionName = function_name;\n            // 存在environment 为新架构 上新字段 JSON序列化字符串\n            if (environment) {\n                parseResult.environment = JSON.parse(environment);\n                return parseResult;\n            }\n            // 不存在environment 则为老字段，老架构上存在bug，无法识别value含特殊字符(若允许特殊字符，影响解析，这里特殊处理)\n            const parseEnviron = environ.split(';');\n            let parseEnvironObj = {};\n            for (let i in parseEnviron) {\n                // value含分号影响切割，未找到= 均忽略\n                if (parseEnviron[i].indexOf('=') >= 0) {\n                    const equalIndex = parseEnviron[i].indexOf('=');\n                    const key = parseEnviron[i].slice(0, equalIndex);\n                    let value = parseEnviron[i].slice(equalIndex + 1);\n                    // value 含, 为数组\n                    if (value.indexOf(',') >= 0) {\n                        value = value.split(',');\n                    }\n                    parseEnvironObj[key] = value;\n                }\n            }\n            parseResult.environ = parseEnvironObj;\n        }\n        catch (err) {\n            throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_CONTEXT));\n        }\n        CloudBase.scfContext = parseResult;\n        return parseResult;\n    }\n    init(config = {}) {\n        let { secretId, secretKey, sessionToken, env, proxy, timeout, serviceUrl, version, headers = {}, credentials, isHttp, throwOnCode, _useFeature } = config;\n        if ((secretId && !secretKey) || (!secretId && secretKey)) {\n            throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'secretId and secretKey must be a pair' }));\n        }\n        const newConfig = {\n            secretId: secretId,\n            secretKey: secretKey,\n            sessionToken: sessionToken,\n            envName: env,\n            proxy,\n            isHttp,\n            headers: Object.assign({}, headers),\n            timeout: timeout || 15000,\n            serviceUrl,\n            credentials,\n            version,\n            throwOnCode: throwOnCode !== undefined ? throwOnCode : true,\n            _useFeature\n        };\n        this.config = newConfig;\n        // 设置旧实例\n        this.oldInstance = tcb_admin_node_1.default.init(config);\n    }\n    database(dbConfig = {}) {\n        database_1.Db.reqClass = dbRequest_1.DBRequest;\n        // 兼容方法预处理\n        if (Object.prototype.toString.call(dbConfig).slice(8, -1) !== 'Object') {\n            throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'dbConfig must be an object' }));\n        }\n        if (dbConfig && dbConfig.env) {\n            // env变量名转换\n            dbConfig.envName = dbConfig.env;\n            delete dbConfig.env;\n        }\n        return new database_1.Db(Object.assign(Object.assign(Object.assign({}, this.config), dbConfig), { _oldDbInstance: this.oldInstance.database(dbConfig) }));\n    }\n    /**\n     * 调用云函数\n     *\n     * @param param0\n     * @param opts\n     */\n    callFunction({ name, data }, opts) {\n        return this.preProcess(functions_1.callFunction)({ name, data }, opts);\n    }\n    auth() {\n        return this.preProcess(auth_1.auth)();\n    }\n    /**\n     * openapi调用\n     *\n     * @param param0\n     * @param opts\n     */\n    callWxOpenApi({ apiName, requestData }, opts) {\n        return this.preProcess(wx_1.callWxOpenApi)({ apiName, requestData }, opts);\n    }\n    /**\n     * wxpayapi调用\n     *\n     * @param param0\n     * @param opts\n     */\n    callWxPayApi({ apiName, requestData }, opts) {\n        return this.preProcess(wx_1.callWxPayApi)({ apiName, requestData }, opts);\n    }\n    /**\n     * 微信云调用\n     *\n     * @param param0\n     * @param opts\n     */\n    callCompatibleWxOpenApi({ apiName, requestData }, opts) {\n        return this.preProcess(wx_1.callCompatibleWxOpenApi)({ apiName, requestData }, opts);\n    }\n    /**\n     * 上传文件\n     *\n     * @param param0\n     * @param opts\n     */\n    uploadFile({ cloudPath, fileContent }, opts) {\n        return this.preProcess(storage_1.uploadFile)({ cloudPath, fileContent }, opts);\n    }\n    /**\n     * 删除文件\n     *\n     * @param param0\n     * @param opts\n     */\n    deleteFile({ fileList }, opts) {\n        return this.preProcess(storage_1.deleteFile)({ fileList }, opts);\n    }\n    /**\n     * 获取临时连接\n     *\n     * @param param0\n     * @param opts\n     */\n    getTempFileURL({ fileList }, opts) {\n        return this.preProcess(storage_1.getTempFileURL)({ fileList }, opts);\n    }\n    /**\n     * 下载文件\n     *\n     * @param params\n     * @param opts\n     */\n    downloadFile(params, opts) {\n        return this.preProcess(storage_1.downloadFile)(params, opts);\n    }\n    /**\n     * 获取上传元数据\n     *\n     * @param param0\n     * @param opts\n     */\n    getUploadMetadata({ cloudPath }, opts) {\n        return this.preProcess(storage_1.getUploadMetadata)({ cloudPath }, opts);\n    }\n    /**\n     * 获取logger\n     *\n     */\n    logger() {\n        if (!this.clsLogger) {\n            this.clsLogger = this.preProcess(log_1.logger)();\n        }\n        return this.clsLogger;\n    }\n    // 兼容处理旧sdk\n    preProcess(func) {\n        const self = this;\n        return function (...args) {\n            // 默认使用旧tcb实例对象\n            const oldInstance = self.oldInstance;\n            const functionName = func.name;\n            const oldFunc = oldInstance[functionName];\n            // 检查用户是否主动设置走新逻辑\n            if (self.config) {\n                const { _useFeature } = self.config;\n                if (_useFeature === true) {\n                    return func.call(self, self, ...args);\n                }\n            }\n            if (utils_1.checkIsGray()) {\n                return func.call(self, self, ...args);\n            }\n            return oldFunc.call(oldInstance, ...args);\n        };\n    }\n}\nexports.CloudBase = CloudBase;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst httpRequest_1 = __importDefault(require(\"../utils/httpRequest\"));\nconst utils_1 = require(\"../utils/utils\");\nconst code_1 = require(\"../const/code\");\n/**\n * 调用云函数\n * @param {String} name  函数名\n * @param {Object} functionParam 函数参数\n * @return {Promise}\n */\nasync function callFunction(cloudbase, { name, data }, opts) {\n    let transformData;\n    try {\n        transformData = data ? JSON.stringify(data) : '';\n    }\n    catch (e) {\n        throw utils_1.E(Object.assign(Object.assign({}, e), { code: code_1.ERROR.INVALID_PARAM.code, message: '对象出现了循环引用' }));\n    }\n    if (!name) {\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: '函数名不能为空' }));\n    }\n    const params = {\n        action: 'functions.invokeFunction',\n        function_name: name,\n        request_data: transformData\n    };\n    return httpRequest_1.default({\n        config: cloudbase.config,\n        params,\n        method: 'post',\n        opts,\n        headers: Object.assign({ 'content-type': 'application/json' }, (process.env.TCB_ROUTE_KEY ? { 'X-Tcb-Route-Key': process.env.TCB_ROUTE_KEY } : {}))\n    }).then(res => {\n        if (res.code) {\n            return res;\n        }\n        // if (res.code) {\n        //     // return res\n        //     throw E({ ...res })\n        // } else {\n        let result;\n        try {\n            result = JSON.parse(res.data.response_data);\n        }\n        catch (e) {\n            result = res.data.response_data;\n        }\n        return {\n            result,\n            requestId: res.requestId\n        };\n    });\n}\nexports.callFunction = callFunction;\n","\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tracing_1 = require(\"./tracing\");\nconst utils = __importStar(require(\"./utils\"));\nconst code_1 = require(\"../const/code\");\nconst symbol_1 = require(\"../const/symbol\");\nconst cloudbase_1 = require(\"../cloudbase\");\nconst request_1 = __importDefault(require(\"./request\"));\nconst requestHook_1 = require(\"./requestHook\");\nconst getWxCloudApiToken_1 = require(\"./getWxCloudApiToken\");\nconst signature_nodejs_1 = require(\"@cloudbase/signature-nodejs\");\nconst url_1 = __importDefault(require(\"url\"));\nconst { version } = require('../../package.json');\nconst { E, second, processReturn, getServerInjectUrl } = utils;\nclass Request {\n    constructor(args) {\n        this.defaultEndPoint = 'tcb-admin.tencentcloudapi.com';\n        this.inScfHost = 'tcb-admin.tencentyun.com';\n        // private openApiHost: string = 'tcb-open.tencentcloudapi.com'\n        this.urlPath = '/admin';\n        this.defaultTimeout = 15000;\n        this.timestamp = new Date().valueOf();\n        this.tracingInfo = tracing_1.generateTracingInfo();\n        this.args = args;\n        this.config = args.config;\n    }\n    /**\n     *\n     * 接口action\n     */\n    getAction() {\n        const { params } = this.args;\n        const { action } = params;\n        return action;\n    }\n    /**\n     * 设置超时warning\n     */\n    setSlowRequeryWarning(action) {\n        const { seqId } = this.tracingInfo;\n        const warnStr = `Your current request ${action ||\n            ''} is longer than 3s, it may be due to the network or your query performance | [${seqId}]`;\n        // 暂针对数据库请求\n        const warnTimer = setTimeout(() => {\n            console.warn(warnStr);\n        }, 3000);\n        return warnTimer;\n    }\n    /**\n     * 构造params\n     */\n    getParams() {\n        const args = this.args;\n        const config = this.config;\n        const { eventId } = this.tracingInfo;\n        let params = Object.assign(Object.assign({}, args.params), { envName: config.envName, eventId, \n            // wxCloudApiToken: process.env.WX_API_TOKEN || '',\n            wxCloudApiToken: getWxCloudApiToken_1.getWxCloudApiToken(), \n            // 对应服务端 wxCloudSessionToken\n            tcb_sessionToken: process.env.TCB_SESSIONTOKEN || '', sessionToken: config.sessionToken, sdk_version: version // todo 可去掉该参数\n         });\n        // 取当前云函数环境时，替换为云函数下环境变量\n        if (params.envName === symbol_1.SYMBOL_CURRENT_ENV) {\n            params.envName = process.env.TCB_ENV || process.env.SCF_NAMESPACE;\n        }\n        // 过滤value undefined\n        utils.filterUndefined(params);\n        return params;\n    }\n    /**\n     *  构造请求项\n     */\n    makeReqOpts() {\n        // 校验密钥是否存在\n        this.validateSecretIdAndKey();\n        const config = this.config;\n        const args = this.args;\n        const url = this.getUrl();\n        const method = this.getMethod();\n        const params = this.getParams();\n        const opts = {\n            url,\n            method,\n            // 先取模块的timeout，没有则取sdk的timeout，还没有就使用默认值\n            // timeout: args.timeout || config.timeout || 15000,\n            timeout: this.getTimeout(),\n            // 优先取config，其次取模块，最后取默认\n            headers: this.getHeaders(),\n            proxy: config.proxy\n        };\n        if (config.forever === true) {\n            opts.forever = true;\n        }\n        if (args.method === 'post') {\n            if (args.isFormData) {\n                opts.formData = params;\n                opts.encoding = null;\n            }\n            else {\n                opts.body = params;\n                opts.json = true;\n            }\n        }\n        else {\n            opts.qs = params;\n        }\n        return opts;\n    }\n    /**\n     * 协议\n     */\n    getProtocol() {\n        return this.config.isHttp === true ? 'http' : 'https';\n    }\n    /**\n     * 请求方法\n     */\n    getMethod() {\n        return this.args.method || 'get';\n    }\n    /**\n     * 超时时间\n     */\n    getTimeout() {\n        const { opts = {} } = this.args;\n        // timeout优先级 自定义接口timeout > config配置timeout > 默认timeout\n        return opts.timeout || this.config.timeout || this.defaultTimeout;\n    }\n    /**\n     * 获取\n     */\n    /**\n     * 校验密钥和token是否存在\n     */\n    validateSecretIdAndKey() {\n        const isInSCF = utils.checkIsInScf();\n        const { secretId, secretKey } = this.config;\n        if (!secretId || !secretKey) {\n            // 用户init未传入密钥对，读process.env\n            const envSecretId = process.env.TENCENTCLOUD_SECRETID;\n            const envSecretKey = process.env.TENCENTCLOUD_SECRETKEY;\n            const sessionToken = process.env.TENCENTCLOUD_SESSIONTOKEN;\n            if (!envSecretId || !envSecretKey) {\n                if (isInSCF) {\n                    throw E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'missing authoration key, redeploy the function' }));\n                }\n                else {\n                    throw E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'missing secretId or secretKey of tencent cloud' }));\n                }\n            }\n            else {\n                this.config = Object.assign(Object.assign({}, this.config), { secretId: envSecretId, secretKey: envSecretKey, sessionToken: sessionToken });\n                return;\n            }\n        }\n    }\n    /**\n     *\n     * 获取headers 此函数中设置authorization\n     */\n    getHeaders() {\n        const config = this.config;\n        const { secretId, secretKey } = config;\n        const args = this.args;\n        const method = this.getMethod();\n        const isInSCF = utils.checkIsInScf();\n        // Note: 云函数被调用时可能调用端未传递 SOURCE，TCB_SOURCE 可能为空\n        const TCB_SOURCE = process.env.TCB_SOURCE || '';\n        const SOURCE = isInSCF ? `${TCB_SOURCE},scf` : ',not_scf';\n        const url = this.getUrl();\n        // 默认\n        let requiredHeaders = {\n            'User-Agent': `tcb-node-sdk/${version}`,\n            'x-tcb-source': SOURCE,\n            'x-client-timestamp': this.timestamp,\n            'X-SDK-Version': `tcb-node-sdk/${version}`,\n            Host: url_1.default.parse(url).host\n        };\n        if (config.version) {\n            requiredHeaders['X-SDK-Version'] = config.version;\n        }\n        requiredHeaders = Object.assign(Object.assign(Object.assign({}, config.headers), args.headers), requiredHeaders);\n        const params = this.getParams();\n        const { authorization, timestamp } = signature_nodejs_1.sign({\n            secretId: secretId,\n            secretKey: secretKey,\n            method: method,\n            url: url,\n            params: params,\n            headers: requiredHeaders,\n            withSignedParams: true,\n            timestamp: second() - 1\n        });\n        requiredHeaders['Authorization'] = authorization;\n        requiredHeaders['X-Signature-Expires'] = 600;\n        requiredHeaders['X-Timestamp'] = timestamp;\n        return Object.assign({}, requiredHeaders);\n    }\n    /**\n     * 获取url\n     * @param action\n     */\n    getUrl() {\n        const protocol = this.getProtocol();\n        const isInSCF = utils.checkIsInScf();\n        const { eventId, seqId } = this.tracingInfo;\n        const { customApiUrl } = this.args;\n        const { serviceUrl } = this.config;\n        const serverInjectUrl = getServerInjectUrl();\n        const defaultUrl = isInSCF\n            ? `http://${this.inScfHost}${this.urlPath}`\n            : `${protocol}://${this.defaultEndPoint}${this.urlPath}`;\n        let url = serviceUrl || serverInjectUrl || customApiUrl || defaultUrl;\n        let urlQueryStr = `&eventId=${eventId}&seqId=${seqId}`;\n        const scfContext = cloudbase_1.CloudBase.scfContext;\n        if (scfContext) {\n            urlQueryStr = `&eventId=${eventId}&seqId=${seqId}&scfRequestId=${scfContext.request_id}`;\n        }\n        if (url.includes('?')) {\n            url = `${url}${urlQueryStr}`;\n        }\n        else {\n            url = `${url}?${urlQueryStr}`;\n        }\n        return url;\n    }\n}\nexports.Request = Request;\n// 业务逻辑都放在这里处理\nexports.default = async (args) => {\n    const req = new Request(args);\n    const reqOpts = req.makeReqOpts();\n    const config = args.config;\n    const action = req.getAction();\n    let reqHooks;\n    let warnTimer = null;\n    if (action === 'wx.openApi' || action === 'wx.wxPayApi') {\n        reqHooks = {\n            handleData: requestHook_1.handleWxOpenApiData\n        };\n    }\n    if (action.indexOf('database') >= 0) {\n        warnTimer = req.setSlowRequeryWarning(action);\n    }\n    try {\n        const res = await request_1.default(reqOpts, reqHooks);\n        // 检查res是否为return {code, message}回包\n        if (res.code) {\n            // 判断是否设置config._returnCodeByThrow = false\n            return processReturn(config.throwOnCode, res);\n        }\n        return res;\n    }\n    finally {\n        if (warnTimer) {\n            clearTimeout(warnTimer);\n        }\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet seqNum = 0;\nfunction getSeqNum() {\n    return ++seqNum;\n}\nfunction generateEventId() {\n    return (Date.now().toString(16) +\n        '_' +\n        getSeqNum().toString(16));\n}\nexports.generateTracingInfo = () => {\n    const TCB_SEQID = process.env.TCB_SEQID || '';\n    const eventId = generateEventId();\n    const seqId = TCB_SEQID ? `${TCB_SEQID}-${eventId}` : eventId;\n    return { eventId, seqId };\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GRAY_ENV_KEY = 'TCB_SDK_GRAY_0';\nclass TcbError extends Error {\n    constructor(error) {\n        super(error.message);\n        this.code = error.code;\n        this.message = error.message;\n        this.requestId = error.requestId;\n    }\n}\nexports.TcbError = TcbError;\nexports.filterValue = function filterValue(o, value) {\n    for (let key in o) {\n        if (o[key] === value) {\n            delete o[key];\n        }\n    }\n};\nexports.filterUndefined = function (o) {\n    return exports.filterValue(o, undefined);\n};\n// export const filterNull = function(o) {\n//   return filterValue(o, null)\n// }\n// export const filterEmptyString = function(o) {\n//   return filterValue(o, '')\n// }\n// export const warpPromise = function warp(fn) {\n//   return function(...args) {\n//     // 确保返回 Promise 实例\n//     return new Promise((resolve, reject) => {\n//       try {\n//         return fn(...args)\n//           .then(resolve)\n//           .catch(reject)\n//       } catch (e) {\n//         reject(e)\n//       }\n//     })\n//   }\n// }\nexports.E = (errObj) => {\n    return new TcbError(errObj);\n};\nexports.isArray = arr => {\n    return arr instanceof Array;\n};\nexports.camSafeUrlEncode = str => {\n    return encodeURIComponent(str)\n        .replace(/!/g, '%21')\n        .replace(/'/g, '%27')\n        .replace(/\\(/g, '%28')\n        .replace(/\\)/g, '%29')\n        .replace(/\\*/g, '%2A');\n};\nexports.map = (obj, fn) => {\n    const o = exports.isArray(obj) ? [] : {};\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            o[i] = fn(obj[i], i);\n        }\n    }\n    return o;\n};\nexports.clone = obj => {\n    return exports.map(obj, function (v) {\n        return typeof v === 'object' && v !== undefined && v !== null ? exports.clone(v) : v;\n    });\n};\nexports.checkIsInScf = () => {\n    return process.env.TENCENTCLOUD_RUNENV === 'SCF';\n};\nexports.delay = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n};\nfunction second() {\n    // istanbul ignore next\n    return Math.floor(new Date().getTime() / 1000);\n}\nexports.second = second;\nfunction processReturn(throwOnCode, res) {\n    if (throwOnCode === false) {\n        // 不抛报错，正常return，兼容旧逻辑\n        return res;\n    }\n    throw exports.E(Object.assign({}, res));\n}\nexports.processReturn = processReturn;\nfunction checkIsGray() {\n    const tcbContextConfig = getTcbContextConfig();\n    return tcbContextConfig[GRAY_ENV_KEY] === true;\n}\nexports.checkIsGray = checkIsGray;\nfunction getServerInjectUrl() {\n    const tcbContextConfig = getTcbContextConfig();\n    return tcbContextConfig['URL'] || '';\n}\nexports.getServerInjectUrl = getServerInjectUrl;\nfunction getTcbContextConfig() {\n    try {\n        if (process.env.TCB_CONTEXT_CNFG) {\n            // 检查约定环境变量字段是否存在\n            return JSON.parse(process.env.TCB_CONTEXT_CNFG);\n        }\n        return {};\n    }\n    catch (e) {\n        console.log('parse context error...');\n        return {};\n    }\n}\nexports.getTcbContextConfig = getTcbContextConfig;\nfunction getWxUrl(config) {\n    const protocal = config.isHttp === true ? 'http' : 'https';\n    let wxUrl = protocal + '://tcb-open.tencentcloudapi.com/admin';\n    if (exports.checkIsInScf()) {\n        wxUrl = 'http://tcb-open.tencentyun.com/admin';\n    }\n    return wxUrl;\n}\nexports.getWxUrl = getWxUrl;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERROR = {\n    INVALID_PARAM: {\n        code: 'INVALID_PARAM',\n        message: 'invalid param'\n    },\n    SYS_ERR: {\n        code: 'SYS_ERR',\n        message: 'system error'\n    },\n    STORAGE_REQUEST_FAIL: {\n        code: 'STORAGE_REQUEST_FAIL',\n        message: 'storage request fail'\n    },\n    STORAGE_FILE_NONEXIST: {\n        code: 'STORAGE_FILE_NONEXIST',\n        message: 'storage file not exist'\n    },\n    TCB_CLS_UNOPEN: {\n        code: 'TCB_CLS_UNOPEN',\n        message: '需要先开通日志检索功能'\n    },\n    INVALID_CONTEXT: {\n        code: 'INVALID_CONTEXT',\n        message: '无效的context对象，请使用 云函数入口的context参数'\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SYMBOL_CURRENT_ENV = Symbol.for(\"SYMBOL_CURRENT_ENV\");\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http_1 = __importDefault(require(\"http\"));\nconst request_1 = __importDefault(require(\"request\"));\nconst utils_1 = require(\"./utils\");\nexports.default = (opts, reqHooks) => {\n    return new Promise((resolve, reject) => {\n        request_1.default(opts, function (err, response, body) {\n            if (err) {\n                return reject(err);\n            }\n            if (response.statusCode === 200) {\n                let res;\n                try {\n                    res = typeof body === 'string' ? JSON.parse(body) : body;\n                    // wx.openApi 调用时，需用content-type区分buffer or JSON\n                    if (reqHooks) {\n                        const { handleData } = reqHooks;\n                        if (handleData) {\n                            res = handleData(res, err, response, body);\n                        }\n                    }\n                }\n                catch (e) {\n                    res = body;\n                }\n                return resolve(res);\n            }\n            else {\n                const e = utils_1.E({\n                    code: response.statusCode,\n                    message: ` ${response.statusCode} ${http_1.default.STATUS_CODES[response.statusCode]} | [url: ${opts.url}]`\n                });\n                reject(e);\n            }\n        });\n    });\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * 处理wxopenapi返回\n *\n * @param err\n * @param response\n * @param body\n */\nexports.handleWxOpenApiData = (res, err, response, body) => {\n    // wx.openApi 调用时，需用content-type区分buffer or JSON\n    const { headers } = response;\n    let transformRes = res;\n    if (headers['content-type'] === 'application/json; charset=utf-8') {\n        transformRes = JSON.parse(transformRes.toString()); // JSON错误时buffer转JSON\n    }\n    return transformRes;\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// 由定时触发器触发时（TRIGGER_SRC=timer）：优先使用 WX_TRIGGER_API_TOKEN_V0，不存在的话，为了兼容兼容旧的开发者工具，也是使用 WX_API_TOKEN\n// 非定时触发器触发时（TRIGGER_SRC!=timer）: 使用 WX_API_TOKEN\nfunction getWxCloudApiToken() {\n    if (process.env.TRIGGER_SRC === 'timer') {\n        return process.env.WX_TRIGGER_API_TOKEN_V0 || process.env.WX_API_TOKEN || '';\n    }\n    else {\n        return process.env.WX_API_TOKEN || '';\n    }\n}\nexports.getWxCloudApiToken = getWxCloudApiToken;\n","module.exports = {\n  \"_from\": \"@cloudbase/node-sdk@2.0.0-beta.6\",\n  \"_id\": \"@cloudbase/node-sdk@2.0.0-beta.6\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-u2EdndZKCXzsNqJu6a67DUvmMu+znVTcLep8YkpAcOQBS0tCLjCEdIqIO5LuPQ4bG+zWXAbQHY6ysnwSqzAcEg==\",\n  \"_location\": \"/@cloudbase/node-sdk\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"version\",\n    \"registry\": true,\n    \"raw\": \"@cloudbase/node-sdk@2.0.0-beta.6\",\n    \"name\": \"@cloudbase/node-sdk\",\n    \"escapedName\": \"@cloudbase%2fnode-sdk\",\n    \"scope\": \"@cloudbase\",\n    \"rawSpec\": \"2.0.0-beta.6\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"2.0.0-beta.6\"\n  },\n  \"_requiredBy\": [\n    \"/wx-server-sdk\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/@cloudbase/node-sdk/-/node-sdk-2.0.0-beta.6.tgz\",\n  \"_shasum\": \"ca51f302167bd23ab508eadfbc915fe33bb43910\",\n  \"_spec\": \"@cloudbase/node-sdk@2.0.0-beta.6\",\n  \"_where\": \"D:\\\\github1\\\\ConquerFitness-develop\\\\cloudfunctions\\\\addData\\\\node_modules\\\\wx-server-sdk\",\n  \"author\": {\n    \"name\": \"lukejyhuang\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/TencentCloudBase/node-sdk/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"@cloudbase/database\": \"1.0.0-beta.2\",\n    \"@cloudbase/signature-nodejs\": \"1.0.0-beta.0\",\n    \"is-regex\": \"^1.0.4\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"lodash.merge\": \"^4.6.1\",\n    \"request\": \"^2.87.0\",\n    \"request-promise\": \"^4.2.5\",\n    \"tcb-admin-node\": \"1.23.0\",\n    \"xml2js\": \"^0.4.19\"\n  },\n  \"deprecated\": false,\n  \"description\": \"tencent cloud base server sdk for node.js\",\n  \"devDependencies\": {\n    \"@types/jest\": \"^23.1.4\",\n    \"@types/mocha\": \"^5.2.4\",\n    \"@types/node\": \"^10.12.12\",\n    \"@typescript-eslint/eslint-plugin\": \"^2.16.0\",\n    \"@typescript-eslint/parser\": \"^2.16.0\",\n    \"babel-eslint\": \"^10.0.3\",\n    \"coveralls\": \"^3.0.9\",\n    \"dumper.js\": \"^1.3.0\",\n    \"eslint\": \"^6.8.0\",\n    \"eslint-config-alloy\": \"^3.5.0\",\n    \"eslint-plugin-prettier\": \"^3.1.2\",\n    \"husky\": \"^3.1.0\",\n    \"jest\": \"^23.3.0\",\n    \"lint-staged\": \"^9.2.5\",\n    \"mocha\": \"^5.2.0\",\n    \"power-assert\": \"^1.5.0\",\n    \"prettier\": \"^1.19.1\",\n    \"ts-jest\": \"^23.10.4\",\n    \"tslib\": \"^1.7.1\",\n    \"typescript\": \"^3.7.4\"\n  },\n  \"engines\": {\n    \"node\": \">=8.6.0\"\n  },\n  \"homepage\": \"https://github.com/TencentCloudBase/node-sdk#readme\",\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run tsc && git add . && lint-staged\"\n    }\n  },\n  \"keywords\": [\n    \"node sdk\"\n  ],\n  \"license\": \"MIT\",\n  \"lint-staged\": {\n    \"*.ts\": [\n      \"eslint --fix\",\n      \"git add\"\n    ]\n  },\n  \"main\": \"lib/index.js\",\n  \"name\": \"@cloudbase/node-sdk\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/TencentCloudBase/node-sdk.git\"\n  },\n  \"scripts\": {\n    \"coverage\": \"jest --detectOpenHandles --coverage\",\n    \"coveralls\": \"cat ./coverage/lcov.info | coveralls\",\n    \"eslint\": \"eslint \\\"./**/*.ts\\\"\",\n    \"eslint-fix\": \"eslint --fix \\\"./**/*.ts\\\"\",\n    \"test\": \"jest  --detectOpenHandles --coverage --verbose\",\n    \"tsc\": \"tsc -p tsconfig.json\",\n    \"tsc:w\": \"tsc -p tsconfig.json -w\",\n    \"tstest\": \"mocha --timeout 5000 --require espower-typescript/guess test/**/*.test.ts\"\n  },\n  \"typings\": \"types/index.d.ts\",\n  \"version\": \"2.0.0-beta.6\"\n}\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonwebtoken_1 = __importDefault(require(\"jsonwebtoken\"));\nconst utils_1 = require(\"../utils/utils\");\nconst code_1 = require(\"../const/code\");\nconst cloudbase_1 = require(\"../cloudbase\");\nconst symbol_1 = require(\"../const/symbol\");\nconst checkCustomUserIdRegex = /^[a-zA-Z0-9_\\-#@~=*(){}[\\]:.,<>+]{4,32}$/;\nfunction validateUid(uid) {\n    if (typeof uid !== 'string') {\n        // console.log('debug:', { ...ERROR.INVALID_PARAM, message: 'uid must be a string' })\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'uid must be a string' }));\n    }\n    if (!checkCustomUserIdRegex.test(uid)) {\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: `Invalid uid: \"${uid}\"` }));\n    }\n}\nfunction auth(cloudbase) {\n    return {\n        getUserInfo() {\n            const openId = process.env.WX_OPENID || '';\n            const appId = process.env.WX_APPID || '';\n            const uid = process.env.TCB_UUID || '';\n            const customUserId = process.env.TCB_CUSTOM_USER_ID || '';\n            const isAnonymous = process.env.TCB_ISANONYMOUS_USER === 'true' ? true : false;\n            return {\n                openId,\n                appId,\n                uid,\n                customUserId,\n                isAnonymous\n            };\n        },\n        async getAuthContext(context) {\n            const { environment, environ } = cloudbase_1.CloudBase.parseContext(context);\n            const env = environment || environ || {};\n            const { TCB_UUID, LOGINTYPE } = env;\n            const res = {\n                uid: TCB_UUID,\n                loginType: LOGINTYPE\n            };\n            if (LOGINTYPE === 'QQ-MINI') {\n                const { QQ_OPENID, QQ_APPID } = env;\n                res.appId = QQ_APPID;\n                res.openId = QQ_OPENID;\n            }\n            return res;\n        },\n        getClientIP() {\n            return process.env.TCB_SOURCE_IP || '';\n        },\n        createTicket: (uid, options = {}) => {\n            validateUid(uid);\n            const timestamp = new Date().getTime();\n            const { credentials } = cloudbase.config;\n            let { envName } = cloudbase.config;\n            if (!envName) {\n                throw new Error('no env in config');\n            }\n            // 使用symbol时替换为环境变量内的env\n            if (envName === symbol_1.SYMBOL_CURRENT_ENV) {\n                envName = process.env.TCB_ENV || process.env.SCF_NAMESPACE;\n            }\n            const { refresh = 3600 * 1000, expire = timestamp + 7 * 24 * 60 * 60 * 1000 } = options;\n            const token = jsonwebtoken_1.default.sign({\n                alg: 'RS256',\n                env: envName,\n                iat: timestamp,\n                exp: timestamp + 10 * 60 * 1000,\n                uid,\n                refresh,\n                expire\n            }, credentials.private_key, { algorithm: 'RS256' });\n            return credentials.private_key_id + '/@@/' + token;\n        }\n    };\n}\nexports.auth = auth;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst httpRequest_1 = __importDefault(require(\"../utils/httpRequest\"));\nconst utils_1 = require(\"../utils/utils\");\nconst code_1 = require(\"../const/code\");\nasync function callWxOpenApi(cloudbase, { apiName, requestData }, opts) {\n    let transformRequestData;\n    try {\n        transformRequestData = requestData ? JSON.stringify(requestData) : '';\n    }\n    catch (e) {\n        throw utils_1.E(Object.assign(Object.assign({}, e), { code: code_1.ERROR.INVALID_PARAM.code, message: '对象出现了循环引用' }));\n    }\n    const params = {\n        action: 'wx.api',\n        apiName,\n        requestData: transformRequestData\n    };\n    return httpRequest_1.default({\n        config: cloudbase.config,\n        params,\n        method: 'post',\n        opts,\n        headers: {\n            'content-type': 'application/json'\n        },\n        customApiUrl: utils_1.getWxUrl(cloudbase.config)\n    }).then(res => {\n        if (res.code) {\n            return res;\n        }\n        //     throw E({ ...res })\n        // } else {\n        let result;\n        try {\n            result = JSON.parse(res.data.responseData);\n        }\n        catch (e) {\n            result = res.data.responseData;\n        }\n        return {\n            result,\n            requestId: res.requestId\n        };\n        // }\n    });\n}\nexports.callWxOpenApi = callWxOpenApi;\n/**\n * 调用wxopenAPi\n * @param {String} apiName  接口名\n * @param {Buffer} requestData\n * @return {Promise} 正常内容为buffer，报错为json {code:'', message:'', resquestId:''}\n */\nasync function callCompatibleWxOpenApi(cloudbase, { apiName, requestData }, opts) {\n    const params = {\n        action: 'wx.openApi',\n        apiName,\n        requestData\n    };\n    return httpRequest_1.default({\n        config: cloudbase.config,\n        method: 'post',\n        headers: { 'content-type': 'multipart/form-data' },\n        params,\n        isFormData: true,\n        customApiUrl: utils_1.getWxUrl(cloudbase.config),\n        opts\n    }).then(res => res);\n}\nexports.callCompatibleWxOpenApi = callCompatibleWxOpenApi;\n/**\n * wx.wxPayApi 微信支付用\n * @param {String} apiName  接口名\n * @param {Buffer} requestData\n * @return {Promise} 正常内容为buffer，报错为json {code:'', message:'', resquestId:''}\n */\nasync function callWxPayApi(cloudbase, { apiName, requestData }, opts) {\n    const params = {\n        action: 'wx.wxPayApi',\n        apiName,\n        requestData\n    };\n    return httpRequest_1.default({\n        config: cloudbase.config,\n        method: 'post',\n        headers: { 'content-type': 'multipart/form-data' },\n        params,\n        isFormData: true,\n        customApiUrl: utils_1.getWxUrl(cloudbase.config),\n        opts\n    });\n}\nexports.callWxPayApi = callWxPayApi;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request_1 = __importDefault(require(\"request\"));\nconst fs_1 = __importDefault(require(\"fs\"));\nconst httpRequest_1 = __importDefault(require(\"../utils/httpRequest\"));\nconst xml2js_1 = require(\"xml2js\");\nconst utils_1 = require(\"../utils/utils\");\nconst code_1 = require(\"../const/code\");\nasync function parseXML(str) {\n    return new Promise((resolve, reject) => {\n        xml2js_1.parseString(str, (err, result) => {\n            if (err) {\n                reject(err);\n            }\n            else {\n                resolve(result);\n            }\n        });\n    });\n}\nexports.parseXML = parseXML;\n/*\n * 上传文件\n * @param {string} cloudPath 上传后的文件路径\n * @param {fs.ReadStream} fileContent  上传文件的二进制流\n */\nasync function uploadFile(cloudbase, { cloudPath, fileContent }, opts) {\n    const { data: { url, token, authorization, fileId, cosFileId } } = await getUploadMetadata(cloudbase, { cloudPath }, opts);\n    const formData = {\n        Signature: authorization,\n        'x-cos-security-token': token,\n        'x-cos-meta-fileid': cosFileId,\n        key: cloudPath,\n        file: fileContent\n    };\n    let body = await new Promise((resolve, reject) => {\n        request_1.default({ url, formData: formData, method: 'post' }, function (err, res, body) {\n            if (err) {\n                reject(err);\n            }\n            else {\n                resolve(body);\n            }\n        });\n    });\n    body = await parseXML(body);\n    if (body && body.Error) {\n        const { Code: [code], Message: [message] } = body.Error;\n        if (code === 'SignatureDoesNotMatch') {\n            return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.SYS_ERR), { message }));\n        }\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.STORAGE_REQUEST_FAIL), { message }));\n    }\n    return {\n        fileID: fileId\n    };\n}\nexports.uploadFile = uploadFile;\n/**\n * 删除文件\n * @param {Array.<string>} fileList 文件id数组\n */\nasync function deleteFile(cloudbase, { fileList }, opts) {\n    if (!fileList || !Array.isArray(fileList)) {\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'fileList必须是非空的数组' }));\n    }\n    for (let file of fileList) {\n        if (!file || typeof file !== 'string') {\n            return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'fileList的元素必须是非空的字符串' }));\n        }\n    }\n    let params = {\n        action: 'storage.batchDeleteFile',\n        fileid_list: fileList\n    };\n    return httpRequest_1.default({\n        config: cloudbase.config,\n        params,\n        method: 'post',\n        opts,\n        headers: {\n            'content-type': 'application/json'\n        }\n    }).then(res => {\n        if (res.code) {\n            return res;\n        }\n        //     throw E({ ...res })\n        // } else {\n        return {\n            fileList: res.data.delete_list,\n            requestId: res.requestId\n        };\n        // }\n    });\n}\nexports.deleteFile = deleteFile;\n/**\n * 获取文件下载链接\n * @param {Array.<Object>} fileList\n */\nasync function getTempFileURL(cloudbase, { fileList }, opts) {\n    if (!fileList || !Array.isArray(fileList)) {\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'fileList必须是非空的数组' }));\n    }\n    let file_list = [];\n    for (let file of fileList) {\n        if (typeof file === 'object') {\n            if (!file.hasOwnProperty('fileID') || !file.hasOwnProperty('maxAge')) {\n                return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'fileList的元素如果是对象，必须是包含fileID和maxAge的对象' }));\n            }\n            file_list.push({\n                fileid: file.fileID,\n                max_age: file.maxAge\n            });\n        }\n        else if (typeof file === 'string') {\n            file_list.push({\n                fileid: file\n            });\n        }\n        else {\n            return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'fileList的元素如果不是对象，则必须是字符串' }));\n        }\n    }\n    let params = {\n        action: 'storage.batchGetDownloadUrl',\n        file_list\n    };\n    // console.log(params);\n    return httpRequest_1.default({\n        config: cloudbase.config,\n        params,\n        method: 'post',\n        opts,\n        headers: {\n            'content-type': 'application/json'\n        }\n    }).then(res => {\n        if (res.code) {\n            return res;\n        }\n        // if (res.code) {\n        //     throw E({ ...res })\n        // } else {\n        return {\n            fileList: res.data.download_list,\n            requestId: res.requestId\n        };\n        // }\n    });\n}\nexports.getTempFileURL = getTempFileURL;\nasync function downloadFile(cloudbase, params, opts) {\n    let tmpUrl;\n    const { fileID, tempFilePath } = params;\n    const tmpUrlRes = await getTempFileURL(cloudbase, {\n        fileList: [\n            {\n                fileID,\n                maxAge: 600\n            }\n        ]\n    }, opts);\n    // console.log(tmpUrlRes);\n    const res = tmpUrlRes.fileList[0];\n    if (res.code !== 'SUCCESS') {\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign({}, res));\n    }\n    tmpUrl = res.tempFileURL;\n    tmpUrl = encodeURI(tmpUrl);\n    let req = request_1.default({\n        url: tmpUrl,\n        encoding: null,\n        proxy: cloudbase.config.proxy\n    });\n    return new Promise((resolve, reject) => {\n        let fileContent = Buffer.alloc(0);\n        req.on('response', function (response) {\n            if (response && Number(response.statusCode) === 200) {\n                if (tempFilePath) {\n                    response.pipe(fs_1.default.createWriteStream(tempFilePath));\n                }\n                else {\n                    response.on('data', data => {\n                        fileContent = Buffer.concat([fileContent, data]);\n                    });\n                }\n                response.on('end', () => {\n                    resolve({\n                        fileContent: tempFilePath ? undefined : fileContent,\n                        message: '文件下载完成'\n                    });\n                });\n            }\n            else {\n                reject(response);\n            }\n        });\n    });\n}\nexports.downloadFile = downloadFile;\nasync function getUploadMetadata(cloudbase, { cloudPath }, opts) {\n    let params = {\n        action: 'storage.getUploadMetadata',\n        path: cloudPath\n    };\n    const res = await httpRequest_1.default({\n        config: cloudbase.config,\n        params,\n        method: 'post',\n        opts,\n        headers: {\n            'content-type': 'application/json'\n        }\n    });\n    // if (res.code) {\n    //     throw E({\n    //         ...ERROR.STORAGE_REQUEST_FAIL,\n    //         message: 'get upload metadata failed: ' + res.code\n    //     })\n    // } else {\n    return res;\n    // }\n}\nexports.getUploadMetadata = getUploadMetadata;\nasync function getFileAuthority(cloudbase, { fileList }) {\n    if (!Array.isArray(fileList)) {\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: '[node-sdk] getCosFileAuthority fileList must be a array' }));\n    }\n    if (fileList.some(file => {\n        if (!file || !file.path) {\n            return true;\n        }\n        if (['READ', 'WRITE', 'READWRITE'].indexOf(file.type) === -1) {\n            return true;\n        }\n        return false;\n    })) {\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: '[node-sdk] getCosFileAuthority fileList param error' }));\n    }\n    const userInfo = this.auth().getUserInfo();\n    const { openId, uid } = userInfo;\n    if (!openId && !uid) {\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: '[node-sdk] admin do not need getCosFileAuthority.' }));\n    }\n    let params = {\n        action: 'storage.getFileAuthority',\n        openId,\n        uid,\n        loginType: process.env.LOGINTYPE,\n        fileList\n    };\n    const res = await httpRequest_1.default({\n        config: this.config,\n        params,\n        method: 'post',\n        headers: {\n            'content-type': 'application/json'\n        }\n    });\n    if (res.code) {\n        throw utils_1.E(Object.assign(Object.assign({}, res), { message: '[node-sdk] getCosFileAuthority failed: ' + res.code }));\n    }\n    else {\n        return res;\n    }\n}\nexports.getFileAuthority = getFileAuthority;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst httpRequest_1 = __importDefault(require(\"./httpRequest\"));\n/**\n * 数据库模块的通用请求方法\n *\n * @author haroldhu\n * @internal\n */\nclass DBRequest {\n    /**\n     * 初始化\n     *\n     * @internal\n     * @param config\n     */\n    constructor(config) {\n        this.config = config;\n    }\n    /**\n     * 发送请求\n     *\n     * @param dbParams   - 数据库请求参数\n     * @param opts  - 可选配置项\n     */\n    async send(api, data, opts) {\n        const params = Object.assign(Object.assign({}, data), { action: api });\n        return httpRequest_1.default({\n            config: this.config,\n            params,\n            method: 'post',\n            opts,\n            headers: {\n                'content-type': 'application/json'\n            }\n        });\n    }\n}\nexports.DBRequest = DBRequest;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../utils/utils\");\nconst code_1 = require(\"../const/code\");\n/**\n *\n *\n * @class Log\n */\nclass Log {\n    constructor() {\n        this.src = 'app';\n        this.isSupportClsReport = true;\n        if (`${process.env._SCF_TCB_LOG}` !== '1') {\n            this.isSupportClsReport = false;\n        }\n        else if (!console.__baseLog__) {\n            this.isSupportClsReport = false;\n        }\n        if (!this.isSupportClsReport) {\n            // 当前非tcb scf环境  log功能会退化为console\n            console.warn('请检查您是否在本地环境 或者 未开通高级日志功能，当前环境下无法上报cls日志，默认使用console');\n        }\n    }\n    /**\n     *\n     *\n     * @param {*} logMsg\n     * @param {*} logLevel\n     * @returns\n     * @memberof Log\n     */\n    transformMsg(logMsg) {\n        // 目前logMsg只支持字符串value且不支持多级, 加一层转换处理\n        let realMsg = {};\n        realMsg = Object.assign(Object.assign({}, realMsg), logMsg);\n        return realMsg;\n    }\n    /**\n     *\n     *\n     * @param {*} logMsg\n     * @param {*} logLevel\n     * @memberof Log\n     */\n    baseLog(logMsg, logLevel) {\n        // 判断当前是否属于tcb scf环境\n        if (Object.prototype.toString.call(logMsg).slice(8, -1) !== 'Object') {\n            throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'log msg must be an object' }));\n        }\n        const msgContent = this.transformMsg(logMsg);\n        if (this.isSupportClsReport) {\n            ;\n            console.__baseLog__(msgContent, logLevel);\n        }\n        else {\n            if (console[logLevel]) {\n                console[logLevel](msgContent);\n            }\n        }\n    }\n    /**\n     *\n     *\n     * @param {*} logMsg\n     * @memberof Log\n     */\n    log(logMsg) {\n        this.baseLog(logMsg, 'log');\n    }\n    /**\n     *\n     *\n     * @param {*} logMsg\n     * @memberof Log\n     */\n    info(logMsg) {\n        this.baseLog(logMsg, 'info');\n    }\n    /**\n     *\n     *\n     * @param {*} logMsg\n     * @memberof Log\n     */\n    error(logMsg) {\n        this.baseLog(logMsg, 'error');\n    }\n    /**\n     *\n     *\n     * @param {*} logMsg\n     * @memberof Log\n     */\n    warn(logMsg) {\n        this.baseLog(logMsg, 'warn');\n    }\n}\nexports.Log = Log;\nfunction logger() {\n    return new Log();\n}\nexports.logger = logger;\n"]}