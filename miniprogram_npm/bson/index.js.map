{"version":3,"sources":["bson.js","map.js","long.js","double.js","timestamp.js","objectid.js","parser\\utils.js","regexp.js","symbol.js","int_32.js","code.js","decimal128.js","min_key.js","max_key.js","db_ref.js","binary.js","constants.js","extended_json.js","parser\\deserializer.js","validate_utf8.js","parser\\serializer.js","float_parser.js","parser\\calculate_size.js","ensure_buffer.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AGTA,ADGA,ADGA;ADIA,AGTA,ADGA,ADGA;ADIA,AGTA,ADGA,ADGA;ADIA,AGTA,ADGA,ADGA,AGTA;AJaA,AGTA,ADGA,ADGA,AGTA;AJaA,AGTA,ADGA,ADGA,AGTA;AJaA,AGTA,ADGA,ADGA,AIZA,ADGA;AJaA,AGTA,ADGA,ADGA,AIZA,ADGA;AJaA,AGTA,ADGA,ADGA,AIZA,ADGA;AJaA,AGTA,ADGA,ADGA,AIZA,ACHA,AFMA;AJaA,AGTA,ADGA,ADGA,AIZA,ACHA,AFMA;AJaA,AGTA,ADGA,ADGA,AIZA,ACHA,AFMA;AJaA,AGTA,ADGA,ADGA,AIZA,ACHA,ACHA,AHSA;AJaA,AGTA,ADGA,ADGA,AIZA,ACHA,ACHA,AHSA;AJaA,AGTA,ADGA,ADGA,AIZA,ACHA,ACHA,AHSA;AJaA,AGTA,ADGA,ADGA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AGTA,ADGA,ADGA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AGTA,ADGA,ADGA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AGTA,AMlBA,APqBA,ADGA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AGTA,AMlBA,ARwBA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AGTA,AMlBA,ARwBA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,APqBA,AMlBA,ARwBA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,APqBA,AMlBA,ARwBA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,APqBA,AMlBA,ARwBA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,ACHA,ARwBA,AMlBA,ARwBA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,ACHA,ARwBA,AMlBA,ARwBA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,ACHA,ARwBA,AMlBA,ARwBA,AIZA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,ACHA,ARwBA,AMlBA,ARwBA,AWjCA,APqBA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,ACHA,ARwBA,AMlBA,ARwBA,AWjCA,APqBA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,ACHA,ARwBA,AMlBA,ARwBA,AWjCA,APqBA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,ACHA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,ACHA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,ACHA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,AIZA,AHSA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,AIZA,AHSA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AJaA,AU9BA,AIZA,AHSA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AIZA,AHSA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AIZA,AHSA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AIZA,AHSA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,AMlBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,ACHA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AZoCA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AZoCA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AZoCA,ACHA,ACHA,AJYA;AWhCA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AXiCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AXiCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AXiCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,ARwBA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,AIZA,AZoCA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,AIZA,AZoCA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,AIZA,AZoCA,ARwBA,AYpCA,ADGA,APqBA,AavCA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,AIZA,AZoCA,ARwBA,AYpCA,ARwBA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,AIZA,AZoCA,ARwBA,AYpCA,ARwBA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,Ac1CA,AIZA,AZoCA,ARwBA,AYpCA,ARwBA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,AoB5DA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,AoB5DA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,AoB5DA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,AoB5DA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,AoB5DA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,AoB5DA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,AoB5DA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AU9BA,AMlBA,AFMA,AHSA,ARwBA,AoB5DA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,AZoCA,ARwBA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,ACHA,AJYA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AYpCA,ANkBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AbuCA,AHSA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AhBgDA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AhBgDA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AhBgDA,Ae7CA;AJaA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AhBgDA;AWhCA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AhBgDA;AWhCA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AhBgDA;AWhCA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA,AhBgDA;AWhCA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,AFMA,AHSA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,ApB4DA,AIZA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AIZA,AhBgDA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AgBhDA,ALeA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,Af6CA,AWjCA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AiBnDA,AJYA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,AMlBA,AZoCA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,ANkBA,AavCA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;ALgBA,AJYA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrBA,AENA;AT4BA,AOrfile":"index.js","sourcesContent":["\n\nconst Buffer = require('buffer').Buffer;\nconst Map = require('./map');\nconst Long = require('./long');\nconst Double = require('./double');\nconst Timestamp = require('./timestamp');\nconst ObjectId = require('./objectid');\nconst BSONRegExp = require('./regexp');\nconst BSONSymbol = require('./symbol');\nconst Int32 = require('./int_32');\nconst Code = require('./code');\nconst Decimal128 = require('./decimal128');\nconst MinKey = require('./min_key');\nconst MaxKey = require('./max_key');\nconst DBRef = require('./db_ref');\nconst Binary = require('./binary');\nconst constants = require('./constants');\nconst EJSON = require('./extended_json');\n\n// Parts of the parser\nconst internalDeserialize = require('./parser/deserializer');\nconst internalSerialize = require('./parser/serializer');\nconst internalCalculateObjectSize = require('./parser/calculate_size');\nconst ensureBuffer = require('./ensure_buffer');\n\n/**\n * @ignore\n */\n// Default Max Size\nconst MAXSIZE = 1024 * 1024 * 17;\n\n// Current Internal Temporary Serialization Buffer\nlet buffer = Buffer.alloc(MAXSIZE);\n\n/**\n * Sets the size of the internal serialization buffer.\n *\n * @method\n * @param {number} size The desired size for the internal serialization buffer\n */\nfunction setInternalBufferSize(size) {\n  // Resize the internal serialization buffer if needed\n  if (buffer.length < size) {\n    buffer = Buffer.alloc(size);\n  }\n}\n\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n */\nfunction serialize(object, options) {\n  options = options || {};\n  // Unpack the options\n  const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  const serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  const ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  const minInternalBufferSize =\n    typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;\n\n  // Resize the internal serialization buffer if needed\n  if (buffer.length < minInternalBufferSize) {\n    buffer = Buffer.alloc(minInternalBufferSize);\n  }\n\n  // Attempt to serialize\n  const serializationIndex = internalSerialize(\n    buffer,\n    object,\n    checkKeys,\n    0,\n    0,\n    serializeFunctions,\n    ignoreUndefined,\n    []\n  );\n\n  // Create the final buffer\n  const finishedBuffer = Buffer.alloc(serializationIndex);\n\n  // Copy into the finished buffer\n  buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);\n\n  // Return the buffer\n  return finishedBuffer;\n}\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @param {Number} [options.index] the index in the buffer where we wish to start serializing into.\n * @return {Number} returns the index pointing to the last written byte in the buffer.\n */\nfunction serializeWithBufferAndIndex(object, finalBuffer, options) {\n  options = options || {};\n  // Unpack the options\n  const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  const serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  const ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  const startIndex = typeof options.index === 'number' ? options.index : 0;\n\n  // Attempt to serialize\n  const serializationIndex = internalSerialize(\n    buffer,\n    object,\n    checkKeys,\n    0,\n    0,\n    serializeFunctions,\n    ignoreUndefined\n  );\n  buffer.copy(finalBuffer, startIndex, 0, serializationIndex);\n\n  // Return the index\n  return startIndex + serializationIndex - 1;\n}\n\n/**\n * Deserialize data as BSON.\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @param {boolean} [options.allowObjectSmallerThanBufferSize=false] allows the buffer to be larger than the parsed BSON object\n * @return {Object} returns the deserialized Javascript Object.\n */\nfunction deserialize(buffer, options) {\n  buffer = ensureBuffer(buffer);\n  return internalDeserialize(buffer, options);\n}\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n */\nfunction calculateObjectSize(object, options) {\n  options = options || {};\n\n  const serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  const ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n\n  return internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined);\n}\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n */\nfunction deserializeStream(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n  options = Object.assign({ allowObjectSmallerThanBufferSize: true }, options);\n  data = ensureBuffer(data);\n\n  let index = startIndex;\n  // Loop over all documents\n  for (let i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    const size =\n      data[index] | (data[index + 1] << 8) | (data[index + 2] << 16) | (data[index + 3] << 24);\n    // Update options with index\n    options.index = index;\n    // Parse the document at this point\n    documents[docStartIndex + i] = internalDeserialize(data, options);\n    // Adjust index by the document size\n    index = index + size;\n  }\n\n  // Return object containing end index of parsing and list of documents\n  return index;\n}\n\nmodule.exports = {\n  // constants\n  // NOTE: this is done this way because rollup can't resolve an `Object.assign`ed export\n  BSON_INT32_MAX: constants.BSON_INT32_MAX,\n  BSON_INT32_MIN: constants.BSON_INT32_MIN,\n  BSON_INT64_MAX: constants.BSON_INT64_MAX,\n  BSON_INT64_MIN: constants.BSON_INT64_MIN,\n  JS_INT_MAX: constants.JS_INT_MAX,\n  JS_INT_MIN: constants.JS_INT_MIN,\n  BSON_DATA_NUMBER: constants.BSON_DATA_NUMBER,\n  BSON_DATA_STRING: constants.BSON_DATA_STRING,\n  BSON_DATA_OBJECT: constants.BSON_DATA_OBJECT,\n  BSON_DATA_ARRAY: constants.BSON_DATA_ARRAY,\n  BSON_DATA_BINARY: constants.BSON_DATA_BINARY,\n  BSON_DATA_UNDEFINED: constants.BSON_DATA_UNDEFINED,\n  BSON_DATA_OID: constants.BSON_DATA_OID,\n  BSON_DATA_BOOLEAN: constants.BSON_DATA_BOOLEAN,\n  BSON_DATA_DATE: constants.BSON_DATA_DATE,\n  BSON_DATA_NULL: constants.BSON_DATA_NULL,\n  BSON_DATA_REGEXP: constants.BSON_DATA_REGEXP,\n  BSON_DATA_DBPOINTER: constants.BSON_DATA_DBPOINTER,\n  BSON_DATA_CODE: constants.BSON_DATA_CODE,\n  BSON_DATA_SYMBOL: constants.BSON_DATA_SYMBOL,\n  BSON_DATA_CODE_W_SCOPE: constants.BSON_DATA_CODE_W_SCOPE,\n  BSON_DATA_INT: constants.BSON_DATA_INT,\n  BSON_DATA_TIMESTAMP: constants.BSON_DATA_TIMESTAMP,\n  BSON_DATA_LONG: constants.BSON_DATA_LONG,\n  BSON_DATA_DECIMAL128: constants.BSON_DATA_DECIMAL128,\n  BSON_DATA_MIN_KEY: constants.BSON_DATA_MIN_KEY,\n  BSON_DATA_MAX_KEY: constants.BSON_DATA_MAX_KEY,\n  BSON_BINARY_SUBTYPE_DEFAULT: constants.BSON_BINARY_SUBTYPE_DEFAULT,\n  BSON_BINARY_SUBTYPE_FUNCTION: constants.BSON_BINARY_SUBTYPE_FUNCTION,\n  BSON_BINARY_SUBTYPE_BYTE_ARRAY: constants.BSON_BINARY_SUBTYPE_BYTE_ARRAY,\n  BSON_BINARY_SUBTYPE_UUID: constants.BSON_BINARY_SUBTYPE_UUID,\n  BSON_BINARY_SUBTYPE_MD5: constants.BSON_BINARY_SUBTYPE_MD5,\n  BSON_BINARY_SUBTYPE_USER_DEFINED: constants.BSON_BINARY_SUBTYPE_USER_DEFINED,\n\n  // wrapped types\n  Code,\n  Map,\n  BSONSymbol,\n  DBRef,\n  Binary,\n  ObjectId,\n  Long,\n  Timestamp,\n  Double,\n  Int32,\n  MinKey,\n  MaxKey,\n  BSONRegExp,\n  Decimal128,\n\n  // methods\n  serialize,\n  serializeWithBufferAndIndex,\n  deserialize,\n  calculateObjectSize,\n  deserializeStream,\n  setInternalBufferSize,\n\n  // legacy support\n  ObjectID: ObjectId,\n\n  // Extended JSON\n  EJSON\n};\n","\n\n// We have an ES6 Map available, return the native instance\nif (typeof global.Map !== 'undefined') {\n  module.exports = global.Map;\n  module.exports.Map = global.Map;\n} else {\n  // We will return a polyfill\n  var Map = function Map(array) {\n    this._keys = [];\n    this._values = {};\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] == null) continue; // skip null and undefined\n      var entry = array[i];\n      var key = entry[0];\n      var value = entry[1];\n      // Add the key to the list of keys in order\n      this._keys.push(key);\n      // Add the key and value to the values dictionary with a point\n      // to the location in the ordered keys list\n      this._values[key] = { v: value, i: this._keys.length - 1 };\n    }\n  };\n\n  Map.prototype.clear = function() {\n    this._keys = [];\n    this._values = {};\n  };\n\n  Map.prototype.delete = function(key) {\n    var value = this._values[key];\n    if (value == null) return false;\n    // Delete entry\n    delete this._values[key];\n    // Remove the key from the ordered keys list\n    this._keys.splice(value.i, 1);\n    return true;\n  };\n\n  Map.prototype.entries = function() {\n    var self = this;\n    var index = 0;\n\n    return {\n      next: function() {\n        var key = self._keys[index++];\n        return {\n          value: key !== undefined ? [key, self._values[key].v] : undefined,\n          done: key !== undefined ? false : true\n        };\n      }\n    };\n  };\n\n  Map.prototype.forEach = function(callback, self) {\n    self = self || this;\n\n    for (var i = 0; i < this._keys.length; i++) {\n      var key = this._keys[i];\n      // Call the forEach callback\n      callback.call(self, this._values[key].v, key, self);\n    }\n  };\n\n  Map.prototype.get = function(key) {\n    return this._values[key] ? this._values[key].v : undefined;\n  };\n\n  Map.prototype.has = function(key) {\n    return this._values[key] != null;\n  };\n\n  Map.prototype.keys = function() {\n    var self = this;\n    var index = 0;\n\n    return {\n      next: function() {\n        var key = self._keys[index++];\n        return {\n          value: key !== undefined ? key : undefined,\n          done: key !== undefined ? false : true\n        };\n      }\n    };\n  };\n\n  Map.prototype.set = function(key, value) {\n    if (this._values[key]) {\n      this._values[key].v = value;\n      return this;\n    }\n\n    // Add the key to the list of keys in order\n    this._keys.push(key);\n    // Add the key and value to the values dictionary with a point\n    // to the location in the ordered keys list\n    this._values[key] = { v: value, i: this._keys.length - 1 };\n    return this;\n  };\n\n  Map.prototype.values = function() {\n    var self = this;\n    var index = 0;\n\n    return {\n      next: function() {\n        var key = self._keys[index++];\n        return {\n          value: key !== undefined ? self._values[key].v : undefined,\n          done: key !== undefined ? false : true\n        };\n      }\n    };\n  };\n\n  // Last ismaster\n  Object.defineProperty(Map.prototype, 'size', {\n    enumerable: true,\n    get: function() {\n      return this._keys.length;\n    }\n  });\n\n  module.exports = Map;\n}\n","\nconst Long = require('long');\n\n/**\n * @ignore\n */\nLong.prototype.toExtendedJSON = function(options) {\n  if (options && options.relaxed) return this.toNumber();\n  return { $numberLong: this.toString() };\n};\n\n/**\n * @ignore\n */\nLong.fromExtendedJSON = function(doc, options) {\n  const result = Long.fromString(doc.$numberLong);\n  return options && options.relaxed ? result.toNumber() : result;\n};\n\nObject.defineProperty(Long.prototype, '_bsontype', { value: 'Long' });\nmodule.exports = Long;\n","\n\n/**\n * A class representation of the BSON Double type.\n */\nclass Double {\n  /**\n   * Create a Double type\n   *\n   * @param {number|Number} value the number we want to represent as a double.\n   * @return {Double}\n   */\n  constructor(value) {\n    if (value instanceof Number) {\n      value = value.valueOf();\n    }\n\n    this.value = value;\n  }\n\n  /**\n   * Access the number value.\n   *\n   * @method\n   * @return {number} returns the wrapped double number.\n   */\n  valueOf() {\n    return this.value;\n  }\n\n  /**\n   * @ignore\n   */\n  toJSON() {\n    return this.value;\n  }\n\n  /**\n   * @ignore\n   */\n  toExtendedJSON(options) {\n    if (options && (options.legacy || (options.relaxed && isFinite(this.value)))) {\n      return this.value;\n    }\n\n    // NOTE: JavaScript has +0 and -0, apparently to model limit calculations. If a user\n    // explicitly provided `-0` then we need to ensure the sign makes it into the output\n    if (Object.is(Math.sign(this.value), -0)) {\n      return { $numberDouble: `-${this.value.toFixed(1)}` };\n    }\n\n    return {\n      $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString()\n    };\n  }\n\n  /**\n   * @ignore\n   */\n  static fromExtendedJSON(doc, options) {\n    const doubleValue = parseFloat(doc.$numberDouble);\n    return options && options.relaxed ? doubleValue : new Double(doubleValue);\n  }\n}\n\nObject.defineProperty(Double.prototype, '_bsontype', { value: 'Double' });\nmodule.exports = Double;\n","\n\nconst Long = require('./long');\n\n/**\n * @class\n * @param {number} low  the low (signed) 32 bits of the Timestamp.\n * @param {number} high the high (signed) 32 bits of the Timestamp.\n * @return {Timestamp}\n */\nclass Timestamp extends Long {\n  constructor(low, high) {\n    if (Long.isLong(low)) {\n      super(low.low, low.high, true);\n    } else {\n      super(low, high, true);\n    }\n  }\n\n  /**\n   * Return the JSON value.\n   *\n   * @method\n   * @return {String} the JSON representation.\n   */\n  toJSON() {\n    return {\n      $timestamp: this.toString()\n    };\n  }\n\n  /**\n   * Returns a Timestamp represented by the given (32-bit) integer value.\n   *\n   * @method\n   * @param {number} value the 32-bit integer in question.\n   * @return {Timestamp} the timestamp.\n   */\n  static fromInt(value) {\n    return new Timestamp(Long.fromInt(value, true));\n  }\n\n  /**\n   * Returns a Timestamp representing the given number value, provided that it is a finite number. Otherwise, zero is returned.\n   *\n   * @method\n   * @param {number} value the number in question.\n   * @return {Timestamp} the timestamp.\n   */\n  static fromNumber(value) {\n    return new Timestamp(Long.fromNumber(value, true));\n  }\n\n  /**\n   * Returns a Timestamp for the given high and low bits. Each is assumed to use 32 bits.\n   *\n   * @method\n   * @param {number} lowBits the low 32-bits.\n   * @param {number} highBits the high 32-bits.\n   * @return {Timestamp} the timestamp.\n   */\n  static fromBits(lowBits, highBits) {\n    return new Timestamp(lowBits, highBits);\n  }\n\n  /**\n   * Returns a Timestamp from the given string, optionally using the given radix.\n   *\n   * @method\n   * @param {String} str the textual representation of the Timestamp.\n   * @param {number} [opt_radix] the radix in which the text is written.\n   * @return {Timestamp} the timestamp.\n   */\n  static fromString(str, opt_radix) {\n    return new Timestamp(Long.fromString(str, opt_radix, true));\n  }\n\n  /**\n   * @ignore\n   */\n  toExtendedJSON() {\n    return { $timestamp: { t: this.high >>> 0, i: this.low >>> 0 } };\n  }\n\n  /**\n   * @ignore\n   */\n  static fromExtendedJSON(doc) {\n    return new Timestamp(doc.$timestamp.i, doc.$timestamp.t);\n  }\n}\n\nObject.defineProperty(Timestamp.prototype, '_bsontype', { value: 'Timestamp' });\n\nTimestamp.MAX_VALUE = Timestamp.MAX_UNSIGNED_VALUE;\n\nmodule.exports = Timestamp;\n","\n\nconst Buffer = require('buffer').Buffer;\nlet randomBytes = require('./parser/utils').randomBytes;\nconst util = require('util');\nconst deprecate = util.deprecate;\n\n// constants\nconst PROCESS_UNIQUE = randomBytes(5);\n\n// Regular expression that checks for hex value\nconst checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\nlet hasBufferType = false;\n\n// Check if buffer exists\ntry {\n  if (Buffer && Buffer.from) hasBufferType = true;\n} catch (err) {\n  hasBufferType = false;\n}\n\n// Precomputed hex table enables speedy hex string conversion\nconst hexTable = [];\nfor (let i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n// Lookup tables\nconst decodeLookup = [];\nlet i = 0;\nwhile (i < 10) decodeLookup[0x30 + i] = i++;\nwhile (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++;\n\nconst _Buffer = Buffer;\nfunction convertToHex(bytes) {\n  return bytes.toString('hex');\n}\n\nfunction makeObjectIdError(invalidString, index) {\n  const invalidCharacter = invalidString[index];\n  return new TypeError(\n    `ObjectId string \"${invalidString}\" contains invalid character \"${invalidCharacter}\" with character code (${invalidString.charCodeAt(\n      index\n    )}). All character codes for a non-hex string must be less than 256.`\n  );\n}\n\n/**\n * A class representation of the BSON ObjectId type.\n */\nclass ObjectId {\n  /**\n   * Create an ObjectId type\n   *\n   * @param {(string|Buffer|number)} id Can be a 24 byte hex string, 12 byte binary Buffer, or a Number.\n   * @property {number} generationTime The generation time of this ObjectId instance\n   * @return {ObjectId} instance of ObjectId.\n   */\n  constructor(id) {\n    // Duck-typing to support ObjectId from different npm packages\n    if (id instanceof ObjectId) return id;\n\n    // The most common usecase (blank id, new objectId instance)\n    if (id == null || typeof id === 'number') {\n      // Generate a new id\n      this.id = ObjectId.generate(id);\n      // If we are caching the hex string\n      if (ObjectId.cacheHexString) this.__id = this.toString('hex');\n      // Return the object\n      return;\n    }\n\n    // Check if the passed in id is valid\n    const valid = ObjectId.isValid(id);\n\n    // Throw an error if it's not a valid setup\n    if (!valid && id != null) {\n      throw new TypeError(\n        'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n      );\n    } else if (valid && typeof id === 'string' && id.length === 24 && hasBufferType) {\n      return new ObjectId(Buffer.from(id, 'hex'));\n    } else if (valid && typeof id === 'string' && id.length === 24) {\n      return ObjectId.createFromHexString(id);\n    } else if (id != null && id.length === 12) {\n      // assume 12 byte string\n      this.id = id;\n    } else if (id != null && id.toHexString) {\n      // Duck-typing to support ObjectId from different npm packages\n      return ObjectId.createFromHexString(id.toHexString());\n    } else {\n      throw new TypeError(\n        'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n      );\n    }\n\n    if (ObjectId.cacheHexString) this.__id = this.toString('hex');\n  }\n\n  /**\n   * Return the ObjectId id as a 24 byte hex string representation\n   *\n   * @method\n   * @return {string} return the 24 byte hex string representation.\n   */\n  toHexString() {\n    if (ObjectId.cacheHexString && this.__id) return this.__id;\n\n    let hexString = '';\n    if (!this.id || !this.id.length) {\n      throw new TypeError(\n        'invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' +\n          JSON.stringify(this.id) +\n          ']'\n      );\n    }\n\n    if (this.id instanceof _Buffer) {\n      hexString = convertToHex(this.id);\n      if (ObjectId.cacheHexString) this.__id = hexString;\n      return hexString;\n    }\n\n    for (let i = 0; i < this.id.length; i++) {\n      const hexChar = hexTable[this.id.charCodeAt(i)];\n      if (typeof hexChar !== 'string') {\n        throw makeObjectIdError(this.id, i);\n      }\n      hexString += hexChar;\n    }\n\n    if (ObjectId.cacheHexString) this.__id = hexString;\n    return hexString;\n  }\n\n  /**\n   * Update the ObjectId index used in generating new ObjectId's on the driver\n   *\n   * @method\n   * @return {number} returns next index value.\n   * @ignore\n   */\n  static getInc() {\n    return (ObjectId.index = (ObjectId.index + 1) % 0xffffff);\n  }\n\n  /**\n   * Generate a 12 byte id buffer used in ObjectId's\n   *\n   * @method\n   * @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n   * @return {Buffer} return the 12 byte id buffer string.\n   */\n  static generate(time) {\n    if ('number' !== typeof time) {\n      time = ~~(Date.now() / 1000);\n    }\n\n    const inc = ObjectId.getInc();\n    const buffer = Buffer.alloc(12);\n\n    // 4-byte timestamp\n    buffer[3] = time & 0xff;\n    buffer[2] = (time >> 8) & 0xff;\n    buffer[1] = (time >> 16) & 0xff;\n    buffer[0] = (time >> 24) & 0xff;\n\n    // 5-byte process unique\n    buffer[4] = PROCESS_UNIQUE[0];\n    buffer[5] = PROCESS_UNIQUE[1];\n    buffer[6] = PROCESS_UNIQUE[2];\n    buffer[7] = PROCESS_UNIQUE[3];\n    buffer[8] = PROCESS_UNIQUE[4];\n\n    // 3-byte counter\n    buffer[11] = inc & 0xff;\n    buffer[10] = (inc >> 8) & 0xff;\n    buffer[9] = (inc >> 16) & 0xff;\n\n    return buffer;\n  }\n\n  /**\n   * Converts the id into a 24 byte hex string for printing\n   *\n   * @param {String} format The Buffer toString format parameter.\n   * @return {String} return the 24 byte hex string representation.\n   * @ignore\n   */\n  toString(format) {\n    // Is the id a buffer then use the buffer toString method to return the format\n    if (this.id && this.id.copy) {\n      return this.id.toString(typeof format === 'string' ? format : 'hex');\n    }\n\n    return this.toHexString();\n  }\n\n  /**\n   * Converts to its JSON representation.\n   *\n   * @return {String} return the 24 byte hex string representation.\n   * @ignore\n   */\n  toJSON() {\n    return this.toHexString();\n  }\n\n  /**\n   * Compares the equality of this ObjectId with `otherID`.\n   *\n   * @method\n   * @param {object} otherId ObjectId instance to compare against.\n   * @return {boolean} the result of comparing two ObjectId's\n   */\n  equals(otherId) {\n    if (otherId instanceof ObjectId) {\n      return this.toString() === otherId.toString();\n    }\n\n    if (\n      typeof otherId === 'string' &&\n      ObjectId.isValid(otherId) &&\n      otherId.length === 12 &&\n      this.id instanceof _Buffer\n    ) {\n      return otherId === this.id.toString('binary');\n    }\n\n    if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 24) {\n      return otherId.toLowerCase() === this.toHexString();\n    }\n\n    if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 12) {\n      return otherId === this.id;\n    }\n\n    if (otherId != null && (otherId instanceof ObjectId || otherId.toHexString)) {\n      return otherId.toHexString() === this.toHexString();\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns the generation date (accurate up to the second) that this ID was generated.\n   *\n   * @method\n   * @return {Date} the generation date\n   */\n  getTimestamp() {\n    const timestamp = new Date();\n    const time = this.id.readUInt32BE(0);\n    timestamp.setTime(Math.floor(time) * 1000);\n    return timestamp;\n  }\n\n  /**\n   * @ignore\n   */\n  static createPk() {\n    return new ObjectId();\n  }\n\n  /**\n   * Creates an ObjectId from a second based number, with the rest of the ObjectId zeroed out. Used for comparisons or sorting the ObjectId.\n   *\n   * @method\n   * @param {number} time an integer number representing a number of seconds.\n   * @return {ObjectId} return the created ObjectId\n   */\n  static createFromTime(time) {\n    const buffer = Buffer.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    // Encode time into first 4 bytes\n    buffer[3] = time & 0xff;\n    buffer[2] = (time >> 8) & 0xff;\n    buffer[1] = (time >> 16) & 0xff;\n    buffer[0] = (time >> 24) & 0xff;\n    // Return the new objectId\n    return new ObjectId(buffer);\n  }\n\n  /**\n   * Creates an ObjectId from a hex string representation of an ObjectId.\n   *\n   * @method\n   * @param {string} hexString create a ObjectId from a passed in 24 byte hexstring.\n   * @return {ObjectId} return the created ObjectId\n   */\n  static createFromHexString(string) {\n    // Throw an error if it's not a valid setup\n    if (typeof string === 'undefined' || (string != null && string.length !== 24)) {\n      throw new TypeError(\n        'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n      );\n    }\n\n    // Use Buffer.from method if available\n    if (hasBufferType) return new ObjectId(Buffer.from(string, 'hex'));\n\n    // Calculate lengths\n    const array = new _Buffer(12);\n\n    let n = 0;\n    let i = 0;\n    while (i < 24) {\n      array[n++] =\n        (decodeLookup[string.charCodeAt(i++)] << 4) | decodeLookup[string.charCodeAt(i++)];\n    }\n\n    return new ObjectId(array);\n  }\n\n  /**\n   * Checks if a value is a valid bson ObjectId\n   *\n   * @method\n   * @param {*} id ObjectId instance to validate.\n   * @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n   */\n  static isValid(id) {\n    if (id == null) return false;\n\n    if (typeof id === 'number') {\n      return true;\n    }\n\n    if (typeof id === 'string') {\n      return id.length === 12 || (id.length === 24 && checkForHexRegExp.test(id));\n    }\n\n    if (id instanceof ObjectId) {\n      return true;\n    }\n\n    if (id instanceof _Buffer && id.length === 12) {\n      return true;\n    }\n\n    // Duck-Typing detection of ObjectId like objects\n    if (id.toHexString) {\n      return id.id.length === 12 || (id.id.length === 24 && checkForHexRegExp.test(id.id));\n    }\n\n    return false;\n  }\n\n  /**\n   * @ignore\n   */\n  toExtendedJSON() {\n    if (this.toHexString) return { $oid: this.toHexString() };\n    return { $oid: this.toString('hex') };\n  }\n\n  /**\n   * @ignore\n   */\n  static fromExtendedJSON(doc) {\n    return new ObjectId(doc.$oid);\n  }\n}\n\n// Deprecated methods\nObjectId.get_inc = deprecate(\n  () => ObjectId.getInc(),\n  'Please use the static `ObjectId.getInc()` instead'\n);\n\nObjectId.prototype.get_inc = deprecate(\n  () => ObjectId.getInc(),\n  'Please use the static `ObjectId.getInc()` instead'\n);\n\nObjectId.prototype.getInc = deprecate(\n  () => ObjectId.getInc(),\n  'Please use the static `ObjectId.getInc()` instead'\n);\n\nObjectId.prototype.generate = deprecate(\n  time => ObjectId.generate(time),\n  'Please use the static `ObjectId.generate(time)` instead'\n);\n\n/**\n * @ignore\n */\nObject.defineProperty(ObjectId.prototype, 'generationTime', {\n  enumerable: true,\n  get: function() {\n    return this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n  },\n  set: function(value) {\n    // Encode time into first 4 bytes\n    this.id[3] = value & 0xff;\n    this.id[2] = (value >> 8) & 0xff;\n    this.id[1] = (value >> 16) & 0xff;\n    this.id[0] = (value >> 24) & 0xff;\n  }\n});\n\n/**\n * Converts to a string representation of this Id.\n *\n * @return {String} return the 24 byte hex string representation.\n * @ignore\n */\nObjectId.prototype[util.inspect.custom || 'inspect'] = ObjectId.prototype.toString;\n\n/**\n * @ignore\n */\nObjectId.index = ~~(Math.random() * 0xffffff);\n\n// In 4.0.0 and 4.0.1, this property name was changed to ObjectId to match the class name.\n// This caused interoperability problems with previous versions of the library, so in\n// later builds we changed it back to ObjectID (capital D) to match legacy implementations.\nObject.defineProperty(ObjectId.prototype, '_bsontype', { value: 'ObjectID' });\nmodule.exports = ObjectId;\n","\n\n/* global window */\n\n/**\n * Normalizes our expected stringified form of a function across versions of node\n * @param {Function} fn The function to stringify\n */\nfunction normalizedFunctionString(fn) {\n  return fn.toString().replace('function(', 'function (');\n}\n\nfunction insecureRandomBytes(size) {\n  const result = new Uint8Array(size);\n  for (let i = 0; i < size; ++i) result[i] = Math.floor(Math.random() * 256);\n  return result;\n}\n\nlet randomBytes = insecureRandomBytes;\nif (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {\n  randomBytes = size => window.crypto.getRandomValues(new Uint8Array(size));\n} else {\n  try {\n    randomBytes = require('crypto').randomBytes;\n  } catch (e) {\n    // keep the fallback\n  }\n\n  // NOTE: in transpiled cases the above require might return null/undefined\n  if (randomBytes == null) {\n    randomBytes = insecureRandomBytes;\n  }\n}\n\nmodule.exports = {\n  normalizedFunctionString,\n  randomBytes\n};\n","\n\nfunction alphabetize(str) {\n  return str\n    .split('')\n    .sort()\n    .join('');\n}\n\n/**\n * A class representation of the BSON RegExp type.\n */\nclass BSONRegExp {\n  /**\n   * Create a RegExp type\n   *\n   * @param {string} pattern The regular expression pattern to match\n   * @param {string} options The regular expression options\n   */\n  constructor(pattern, options) {\n    // Execute\n    this.pattern = pattern || '';\n    this.options = options ? alphabetize(options) : '';\n\n    // Validate options\n    for (let i = 0; i < this.options.length; i++) {\n      if (\n        !(\n          this.options[i] === 'i' ||\n          this.options[i] === 'm' ||\n          this.options[i] === 'x' ||\n          this.options[i] === 'l' ||\n          this.options[i] === 's' ||\n          this.options[i] === 'u'\n        )\n      ) {\n        throw new Error(`The regular expression option [${this.options[i]}] is not supported`);\n      }\n    }\n  }\n\n  static parseOptions(options) {\n    return options\n      ? options\n          .split('')\n          .sort()\n          .join('')\n      : '';\n  }\n\n  /**\n   * @ignore\n   */\n  toExtendedJSON(options) {\n    options = options || {};\n    if (options.legacy) {\n      return { $regex: this.pattern, $options: this.options };\n    }\n    return { $regularExpression: { pattern: this.pattern, options: this.options } };\n  }\n\n  /**\n   * @ignore\n   */\n  static fromExtendedJSON(doc) {\n    if (doc.$regex) {\n      // This is for $regex query operators that have extended json values.\n      if (doc.$regex._bsontype === 'BSONRegExp') {\n        return doc;\n      }\n      return new BSONRegExp(doc.$regex, BSONRegExp.parseOptions(doc.$options));\n    }\n    return new BSONRegExp(\n      doc.$regularExpression.pattern,\n      BSONRegExp.parseOptions(doc.$regularExpression.options)\n    );\n  }\n}\n\nObject.defineProperty(BSONRegExp.prototype, '_bsontype', { value: 'BSONRegExp' });\nmodule.exports = BSONRegExp;\n","\n/**\n * A class representation of the BSON Symbol type.\n */\nclass BSONSymbol {\n  /**\n   * Create a Symbol type\n   *\n   * @param {string} value the string representing the symbol.\n   */\n  constructor(value) {\n    this.value = value;\n  }\n\n  /**\n   * Access the wrapped string value.\n   *\n   * @method\n   * @return {String} returns the wrapped string.\n   */\n  valueOf() {\n    return this.value;\n  }\n\n  /**\n   * @ignore\n   */\n  toString() {\n    return this.value;\n  }\n\n  /**\n   * @ignore\n   */\n  inspect() {\n    return this.value;\n  }\n\n  /**\n   * @ignore\n   */\n  toJSON() {\n    return this.value;\n  }\n\n  /**\n   * @ignore\n   */\n  toExtendedJSON() {\n    return { $symbol: this.value };\n  }\n\n  /**\n   * @ignore\n   */\n  static fromExtendedJSON(doc) {\n    return new BSONSymbol(doc.$symbol);\n  }\n}\n\nObject.defineProperty(BSONSymbol.prototype, '_bsontype', { value: 'Symbol' });\nmodule.exports = BSONSymbol;\n","\n/**\n * A class representation of a BSON Int32 type.\n */\nclass Int32 {\n  /**\n   * Create an Int32 type\n   *\n   * @param {number|Number} value the number we want to represent as an int32.\n   * @return {Int32}\n   */\n  constructor(value) {\n    if (value instanceof Number) {\n      value = value.valueOf();\n    }\n\n    this.value = value;\n  }\n\n  /**\n   * Access the number value.\n   *\n   * @method\n   * @return {number} returns the wrapped int32 number.\n   */\n  valueOf() {\n    return this.value;\n  }\n\n  /**\n   * @ignore\n   */\n  toJSON() {\n    return this.value;\n  }\n\n  /**\n   * @ignore\n   */\n  toExtendedJSON(options) {\n    if (options && (options.relaxed || options.legacy)) return this.value;\n    return { $numberInt: this.value.toString() };\n  }\n\n  /**\n   * @ignore\n   */\n  static fromExtendedJSON(doc, options) {\n    return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);\n  }\n}\n\nObject.defineProperty(Int32.prototype, '_bsontype', { value: 'Int32' });\nmodule.exports = Int32;\n","\n\n/**\n * A class representation of the BSON Code type.\n */\nclass Code {\n  /**\n   * Create a Code type\n   *\n   * @param {(string|function)} code a string or function.\n   * @param {Object} [scope] an optional scope for the function.\n   * @return {Code}\n   */\n  constructor(code, scope) {\n    this.code = code;\n    this.scope = scope;\n  }\n\n  /**\n   * @ignore\n   */\n  toJSON() {\n    return { scope: this.scope, code: this.code };\n  }\n\n  /**\n   * @ignore\n   */\n  toExtendedJSON() {\n    if (this.scope) {\n      return { $code: this.code, $scope: this.scope };\n    }\n\n    return { $code: this.code };\n  }\n\n  /**\n   * @ignore\n   */\n  static fromExtendedJSON(doc) {\n    return new Code(doc.$code, doc.$scope);\n  }\n}\n\nObject.defineProperty(Code.prototype, '_bsontype', { value: 'Code' });\nmodule.exports = Code;\n","\n\nlet Long = require('./long');\nconst Buffer = require('buffer').Buffer;\n\nconst PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nconst PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nconst PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\n\nconst EXPONENT_MAX = 6111;\nconst EXPONENT_MIN = -6176;\nconst EXPONENT_BIAS = 6176;\nconst MAX_DIGITS = 34;\n\n// Nan value bits as 32 bit values (due to lack of longs)\nconst NAN_BUFFER = [\n  0x7c,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\n// Infinity value bits 32 bit values (due to lack of longs)\nconst INF_NEGATIVE_BUFFER = [\n  0xf8,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\nconst INF_POSITIVE_BUFFER = [\n  0x78,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\n\nconst EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\n\n// Detect if the value is a digit\nfunction isDigit(value) {\n  return !isNaN(parseInt(value, 10));\n}\n\n// Divide two uint128 values\nfunction divideu128(value) {\n  const DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n  let _rem = Long.fromNumber(0);\n\n  if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n    return { quotient: value, rem: _rem };\n  }\n\n  for (let i = 0; i <= 3; i++) {\n    // Adjust remainder to match value of next dividend\n    _rem = _rem.shiftLeft(32);\n    // Add the divided to _rem\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low;\n    _rem = _rem.modulo(DIVISOR);\n  }\n\n  return { quotient: value, rem: _rem };\n}\n\n// Multiply two Long values and return the 128 bit value\nfunction multiply64x2(left, right) {\n  if (!left && !right) {\n    return { high: Long.fromNumber(0), low: Long.fromNumber(0) };\n  }\n\n  const leftHigh = left.shiftRightUnsigned(32);\n  const leftLow = new Long(left.getLowBits(), 0);\n  const rightHigh = right.shiftRightUnsigned(32);\n  const rightLow = new Long(right.getLowBits(), 0);\n\n  let productHigh = leftHigh.multiply(rightHigh);\n  let productMid = leftHigh.multiply(rightLow);\n  let productMid2 = leftLow.multiply(rightHigh);\n  let productLow = leftLow.multiply(rightLow);\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0)\n    .add(productMid2)\n    .add(productLow.shiftRightUnsigned(32));\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n\n  // Return the 128 bit result\n  return { high: productHigh, low: productLow };\n}\n\nfunction lessThan(left, right) {\n  // Make values unsigned\n  const uhleft = left.high >>> 0;\n  const uhright = right.high >>> 0;\n\n  // Compare high bits first\n  if (uhleft < uhright) {\n    return true;\n  } else if (uhleft === uhright) {\n    const ulleft = left.low >>> 0;\n    const ulright = right.low >>> 0;\n    if (ulleft < ulright) return true;\n  }\n\n  return false;\n}\n\nfunction invalidErr(string, message) {\n  throw new TypeError(`\"${string}\" is not a valid Decimal128 string - ${message}`);\n}\n\n/**\n * A class representation of the BSON Decimal128 type.\n *\n * @class\n * @param {Buffer} bytes a buffer containing the raw Decimal128 bytes.\n * @return {Double}\n */\nfunction Decimal128(bytes) {\n  this.bytes = bytes;\n}\n\n/**\n * Create a Decimal128 instance from a string representation\n *\n * @method\n * @param {string} string a numeric string representation.\n * @return {Decimal128} returns a Decimal128 instance.\n */\nDecimal128.fromString = function(string) {\n  // Parse state tracking\n  let isNegative = false;\n  let sawRadix = false;\n  let foundNonZero = false;\n\n  // Total number of significant digits (no leading or trailing zero)\n  let significantDigits = 0;\n  // Total number of significand digits read\n  let nDigitsRead = 0;\n  // Total number of digits (no leading zeros)\n  let nDigits = 0;\n  // The number of the digits after radix\n  let radixPosition = 0;\n  // The index of the first non-zero in *str*\n  let firstNonZero = 0;\n\n  // Digits Array\n  const digits = [0];\n  // The number of digits in digits\n  let nDigitsStored = 0;\n  // Insertion pointer for digits\n  let digitsInsert = 0;\n  // The index of the first non-zero digit\n  let firstDigit = 0;\n  // The index of the last digit\n  let lastDigit = 0;\n\n  // Exponent\n  let exponent = 0;\n  // loop index over array\n  let i = 0;\n  // The high 17 digits of the significand\n  let significandHigh = [0, 0];\n  // The low 17 digits of the significand\n  let significandLow = [0, 0];\n  // The biased exponent\n  let biasedExponent = 0;\n\n  // Read index\n  let index = 0;\n\n  // Naively prevent against REDOS attacks.\n  // TODO: implementing a custom parsing for this, or refactoring the regex would yield\n  //       further gains.\n  if (string.length >= 7000) {\n    throw new TypeError('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Results\n  const stringMatch = string.match(PARSE_STRING_REGEXP);\n  const infMatch = string.match(PARSE_INF_REGEXP);\n  const nanMatch = string.match(PARSE_NAN_REGEXP);\n\n  // Validate the string\n  if ((!stringMatch && !infMatch && !nanMatch) || string.length === 0) {\n    throw new TypeError('' + string + ' not a valid Decimal128 string');\n  }\n\n  if (stringMatch) {\n    // full_match = stringMatch[0]\n    // sign = stringMatch[1]\n\n    let unsignedNumber = stringMatch[2];\n    // stringMatch[3] is undefined if a whole number (ex \"1\", 12\")\n    // but defined if a number w/ decimal in it (ex \"1.0, 12.2\")\n\n    let e = stringMatch[4];\n    let expSign = stringMatch[5];\n    let expNumber = stringMatch[6];\n\n    // they provided e, but didn't give an exponent number. for ex \"1e\"\n    if (e && expNumber === undefined) invalidErr(string, 'missing exponent power');\n\n    // they provided e, but didn't give a number before it. for ex \"e1\"\n    if (e && unsignedNumber === undefined) invalidErr(string, 'missing exponent base');\n\n    if (e === undefined && (expSign || expNumber)) {\n      invalidErr(string, 'missing e before exponent');\n    }\n  }\n\n  // Get the negative or positive sign\n  if (string[index] === '+' || string[index] === '-') {\n    isNegative = string[index++] === '-';\n  }\n\n  // Check if user passed Infinity or NaN\n  if (!isDigit(string[index]) && string[index] !== '.') {\n    if (string[index] === 'i' || string[index] === 'I') {\n      return new Decimal128(Buffer.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n    } else if (string[index] === 'N') {\n      return new Decimal128(Buffer.from(NAN_BUFFER));\n    }\n  }\n\n  // Read all the digits\n  while (isDigit(string[index]) || string[index] === '.') {\n    if (string[index] === '.') {\n      if (sawRadix) invalidErr(string, 'contains multiple periods');\n\n      sawRadix = true;\n      index = index + 1;\n      continue;\n    }\n\n    if (nDigitsStored < 34) {\n      if (string[index] !== '0' || foundNonZero) {\n        if (!foundNonZero) {\n          firstNonZero = nDigitsRead;\n        }\n\n        foundNonZero = true;\n\n        // Only store 34 digits\n        digits[digitsInsert++] = parseInt(string[index], 10);\n        nDigitsStored = nDigitsStored + 1;\n      }\n    }\n\n    if (foundNonZero) nDigits = nDigits + 1;\n    if (sawRadix) radixPosition = radixPosition + 1;\n\n    nDigitsRead = nDigitsRead + 1;\n    index = index + 1;\n  }\n\n  if (sawRadix && !nDigitsRead) throw new TypeError('' + string + ' not a valid Decimal128 string');\n\n  // Read exponent if exists\n  if (string[index] === 'e' || string[index] === 'E') {\n    // Read exponent digits\n    const match = string.substr(++index).match(EXPONENT_REGEX);\n\n    // No digits read\n    if (!match || !match[2]) return new Decimal128(Buffer.from(NAN_BUFFER));\n\n    // Get exponent\n    exponent = parseInt(match[0], 10);\n\n    // Adjust the index\n    index = index + match[0].length;\n  }\n\n  // Return not a number\n  if (string[index]) return new Decimal128(Buffer.from(NAN_BUFFER));\n\n  // Done reading input\n  // Find first non-zero digit in digits\n  firstDigit = 0;\n\n  if (!nDigitsStored) {\n    firstDigit = 0;\n    lastDigit = 0;\n    digits[0] = 0;\n    nDigits = 1;\n    nDigitsStored = 1;\n    significantDigits = 0;\n  } else {\n    lastDigit = nDigitsStored - 1;\n    significantDigits = nDigits;\n    if (significantDigits !== 1) {\n      while (string[firstNonZero + significantDigits - 1] === '0') {\n        significantDigits = significantDigits - 1;\n      }\n    }\n  }\n\n  // Normalization of exponent\n  // Correct exponent based on radix position, and shift significand as needed\n  // to represent user input\n\n  // Overflow prevention\n  if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {\n    exponent = EXPONENT_MIN;\n  } else {\n    exponent = exponent - radixPosition;\n  }\n\n  // Attempt to normalize the exponent\n  while (exponent > EXPONENT_MAX) {\n    // Shift exponent to significand and decrease\n    lastDigit = lastDigit + 1;\n\n    if (lastDigit - firstDigit > MAX_DIGITS) {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      const digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      }\n\n      invalidErr(string, 'overflow');\n    }\n    exponent = exponent - 1;\n  }\n\n  while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n    // Shift last digit. can only do this if < significant digits than # stored.\n    if (lastDigit === 0 && significantDigits < nDigitsStored) {\n      exponent = EXPONENT_MIN;\n      significantDigits = 0;\n      break;\n    }\n\n    if (nDigitsStored < nDigits) {\n      // adjust to match digits not stored\n      nDigits = nDigits - 1;\n    } else {\n      // adjust to round\n      lastDigit = lastDigit - 1;\n    }\n\n    if (exponent < EXPONENT_MAX) {\n      exponent = exponent + 1;\n    } else {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      const digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      }\n      invalidErr(string, 'overflow');\n    }\n  }\n\n  // Round\n  // We've normalized the exponent, but might still need to round.\n  if (lastDigit - firstDigit + 1 < significantDigits) {\n    let endOfString = nDigitsRead;\n\n    // If we have seen a radix point, 'string' is 1 longer than we have\n    // documented with ndigits_read, so inc the position of the first nonzero\n    // digit and the position that digits are read to.\n    if (sawRadix) {\n      firstNonZero = firstNonZero + 1;\n      endOfString = endOfString + 1;\n    }\n    // if negative, we need to increment again to account for - sign at start.\n    if (isNegative) {\n      firstNonZero = firstNonZero + 1;\n      endOfString = endOfString + 1;\n    }\n\n    const roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);\n    let roundBit = 0;\n\n    if (roundDigit >= 5) {\n      roundBit = 1;\n      if (roundDigit === 5) {\n        roundBit = digits[lastDigit] % 2 === 1;\n        for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n          if (parseInt(string[i], 10)) {\n            roundBit = 1;\n            break;\n          }\n        }\n      }\n    }\n\n    if (roundBit) {\n      let dIdx = lastDigit;\n\n      for (; dIdx >= 0; dIdx--) {\n        if (++digits[dIdx] > 9) {\n          digits[dIdx] = 0;\n\n          // overflowed most significant digit\n          if (dIdx === 0) {\n            if (exponent < EXPONENT_MAX) {\n              exponent = exponent + 1;\n              digits[dIdx] = 1;\n            } else {\n              return new Decimal128(\n                Buffer.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Encode significand\n  // The high 17 digits of the significand\n  significandHigh = Long.fromNumber(0);\n  // The low 17 digits of the significand\n  significandLow = Long.fromNumber(0);\n\n  // read a zero\n  if (significantDigits === 0) {\n    significandHigh = Long.fromNumber(0);\n    significandLow = Long.fromNumber(0);\n  } else if (lastDigit - firstDigit < 17) {\n    let dIdx = firstDigit;\n    significandLow = Long.fromNumber(digits[dIdx++]);\n    significandHigh = new Long(0, 0);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  } else {\n    let dIdx = firstDigit;\n    significandHigh = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit - 17; dIdx++) {\n      significandHigh = significandHigh.multiply(Long.fromNumber(10));\n      significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n    }\n\n    significandLow = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  }\n\n  const significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n  significand.low = significand.low.add(significandLow);\n\n  if (lessThan(significand.low, significandLow)) {\n    significand.high = significand.high.add(Long.fromNumber(1));\n  }\n\n  // Biased exponent\n  biasedExponent = exponent + EXPONENT_BIAS;\n  const dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };\n\n  // Encode combination, exponent, and significand.\n  if (\n    significand.high\n      .shiftRightUnsigned(49)\n      .and(Long.fromNumber(1))\n      .equals(Long.fromNumber(1))\n  ) {\n    // Encode '11' into bits 1 to 3\n    dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n    dec.high = dec.high.or(\n      Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47))\n    );\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n  } else {\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n  }\n\n  dec.low = significand.low;\n\n  // Encode sign\n  if (isNegative) {\n    dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n  }\n\n  // Encode into a buffer\n  const buffer = Buffer.alloc(16);\n  index = 0;\n\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.low.low & 0xff;\n  buffer[index++] = (dec.low.low >> 8) & 0xff;\n  buffer[index++] = (dec.low.low >> 16) & 0xff;\n  buffer[index++] = (dec.low.low >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.low.high & 0xff;\n  buffer[index++] = (dec.low.high >> 8) & 0xff;\n  buffer[index++] = (dec.low.high >> 16) & 0xff;\n  buffer[index++] = (dec.low.high >> 24) & 0xff;\n\n  // Encode the high 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.high.low & 0xff;\n  buffer[index++] = (dec.high.low >> 8) & 0xff;\n  buffer[index++] = (dec.high.low >> 16) & 0xff;\n  buffer[index++] = (dec.high.low >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.high.high & 0xff;\n  buffer[index++] = (dec.high.high >> 8) & 0xff;\n  buffer[index++] = (dec.high.high >> 16) & 0xff;\n  buffer[index++] = (dec.high.high >> 24) & 0xff;\n\n  // Return the new Decimal128\n  return new Decimal128(buffer);\n};\n\n// Extract least significant 5 bits\nconst COMBINATION_MASK = 0x1f;\n// Extract least significant 14 bits\nconst EXPONENT_MASK = 0x3fff;\n// Value of combination field for Inf\nconst COMBINATION_INFINITY = 30;\n// Value of combination field for NaN\nconst COMBINATION_NAN = 31;\n\n/**\n * Create a string representation of the raw Decimal128 value\n *\n * @method\n * @return {string} returns a Decimal128 string representation.\n */\nDecimal128.prototype.toString = function() {\n  // Note: bits in this routine are referred to starting at 0,\n  // from the sign bit, towards the coefficient.\n\n  // bits 0 - 31\n  let high;\n  // bits 32 - 63\n  let midh;\n  // bits 64 - 95\n  let midl;\n  // bits 96 - 127\n  let low;\n  // bits 1 - 5\n  let combination;\n  // decoded biased exponent (14 bits)\n  let biased_exponent;\n  // the number of significand digits\n  let significand_digits = 0;\n  // the base-10 digits in the significand\n  const significand = new Array(36);\n  for (let i = 0; i < significand.length; i++) significand[i] = 0;\n  // read pointer into significand\n  let index = 0;\n\n  // unbiased exponent\n  let exponent;\n  // the exponent if scientific notation is used\n  let scientific_exponent;\n\n  // true if the number is zero\n  let is_zero = false;\n\n  // the most signifcant significand bits (50-46)\n  let significand_msb;\n  // temporary storage for significand decoding\n  let significand128 = { parts: new Array(4) };\n  // indexing variables\n  let j, k;\n\n  // Output string\n  const string = [];\n\n  // Unpack index\n  index = 0;\n\n  // Buffer reference\n  const buffer = this.bytes;\n\n  // Unpack the low 64bits into a long\n  low =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n  midl =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Unpack the high 64bits into a long\n  midh =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n  high =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Unpack index\n  index = 0;\n\n  // Create the state of the decimal\n  const dec = {\n    low: new Long(low, midl),\n    high: new Long(midh, high)\n  };\n\n  if (dec.high.lessThan(Long.ZERO)) {\n    string.push('-');\n  }\n\n  // Decode combination field and exponent\n  combination = (high >> 26) & COMBINATION_MASK;\n\n  if (combination >> 3 === 3) {\n    // Check for 'special' values\n    if (combination === COMBINATION_INFINITY) {\n      return string.join('') + 'Infinity';\n    } else if (combination === COMBINATION_NAN) {\n      return 'NaN';\n    } else {\n      biased_exponent = (high >> 15) & EXPONENT_MASK;\n      significand_msb = 0x08 + ((high >> 14) & 0x01);\n    }\n  } else {\n    significand_msb = (high >> 14) & 0x07;\n    biased_exponent = (high >> 17) & EXPONENT_MASK;\n  }\n\n  exponent = biased_exponent - EXPONENT_BIAS;\n\n  // Create string of significand digits\n\n  // Convert the 114-bit binary number represented by\n  // (significand_high, significand_low) to at most 34 decimal\n  // digits through modulo and division.\n  significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n  significand128.parts[1] = midh;\n  significand128.parts[2] = midl;\n  significand128.parts[3] = low;\n\n  if (\n    significand128.parts[0] === 0 &&\n    significand128.parts[1] === 0 &&\n    significand128.parts[2] === 0 &&\n    significand128.parts[3] === 0\n  ) {\n    is_zero = true;\n  } else {\n    for (k = 3; k >= 0; k--) {\n      let least_digits = 0;\n      // Peform the divide\n      let result = divideu128(significand128);\n      significand128 = result.quotient;\n      least_digits = result.rem.low;\n\n      // We now have the 9 least significant digits (in base 2).\n      // Convert and output to string.\n      if (!least_digits) continue;\n\n      for (j = 8; j >= 0; j--) {\n        // significand[k * 9 + j] = Math.round(least_digits % 10);\n        significand[k * 9 + j] = least_digits % 10;\n        // least_digits = Math.round(least_digits / 10);\n        least_digits = Math.floor(least_digits / 10);\n      }\n    }\n  }\n\n  // Output format options:\n  // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd\n  // Regular    - ddd.ddd\n\n  if (is_zero) {\n    significand_digits = 1;\n    significand[index] = 0;\n  } else {\n    significand_digits = 36;\n    while (!significand[index]) {\n      significand_digits = significand_digits - 1;\n      index = index + 1;\n    }\n  }\n\n  scientific_exponent = significand_digits - 1 + exponent;\n\n  // The scientific exponent checks are dictated by the string conversion\n  // specification and are somewhat arbitrary cutoffs.\n  //\n  // We must check exponent > 0, because if this is the case, the number\n  // has trailing zeros.  However, we *cannot* output these trailing zeros,\n  // because doing so would change the precision of the value, and would\n  // change stored data if the string converted number is round tripped.\n  if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n    // Scientific format\n\n    // if there are too many significant digits, we should just be treating numbers\n    // as + or - 0 and using the non-scientific exponent (this is for the \"invalid\n    // representation should be treated as 0/-0\" spec cases in decimal128-1.json)\n    if (significand_digits > 34) {\n      string.push(0);\n      if (exponent > 0) string.push('E+' + exponent);\n      else if (exponent < 0) string.push('E' + exponent);\n      return string.join('');\n    }\n\n    string.push(significand[index++]);\n    significand_digits = significand_digits - 1;\n\n    if (significand_digits) {\n      string.push('.');\n    }\n\n    for (let i = 0; i < significand_digits; i++) {\n      string.push(significand[index++]);\n    }\n\n    // Exponent\n    string.push('E');\n    if (scientific_exponent > 0) {\n      string.push('+' + scientific_exponent);\n    } else {\n      string.push(scientific_exponent);\n    }\n  } else {\n    // Regular format with no decimal place\n    if (exponent >= 0) {\n      for (let i = 0; i < significand_digits; i++) {\n        string.push(significand[index++]);\n      }\n    } else {\n      let radix_position = significand_digits + exponent;\n\n      // non-zero digits before radix\n      if (radix_position > 0) {\n        for (let i = 0; i < radix_position; i++) {\n          string.push(significand[index++]);\n        }\n      } else {\n        string.push('0');\n      }\n\n      string.push('.');\n      // add leading zeros after radix\n      while (radix_position++ < 0) {\n        string.push('0');\n      }\n\n      for (let i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n        string.push(significand[index++]);\n      }\n    }\n  }\n\n  return string.join('');\n};\n\nDecimal128.prototype.toJSON = function() {\n  return { $numberDecimal: this.toString() };\n};\n\n/**\n * @ignore\n */\nDecimal128.prototype.toExtendedJSON = function() {\n  return { $numberDecimal: this.toString() };\n};\n\n/**\n * @ignore\n */\nDecimal128.fromExtendedJSON = function(doc) {\n  return Decimal128.fromString(doc.$numberDecimal);\n};\n\nObject.defineProperty(Decimal128.prototype, '_bsontype', { value: 'Decimal128' });\nmodule.exports = Decimal128;\n","\n/**\n * A class representation of the BSON MinKey type.\n */\nclass MinKey {\n  /**\n   * Create a MinKey type\n   *\n   * @return {MinKey} A MinKey instance\n   */\n  constructor() {}\n\n  /**\n   * @ignore\n   */\n  toExtendedJSON() {\n    return { $minKey: 1 };\n  }\n\n  /**\n   * @ignore\n   */\n  static fromExtendedJSON() {\n    return new MinKey();\n  }\n}\n\nObject.defineProperty(MinKey.prototype, '_bsontype', { value: 'MinKey' });\nmodule.exports = MinKey;\n","\n/**\n * A class representation of the BSON MaxKey type.\n */\nclass MaxKey {\n  /**\n   * Create a MaxKey type\n   *\n   * @return {MaxKey} A MaxKey instance\n   */\n  constructor() {}\n\n  /**\n   * @ignore\n   */\n  toExtendedJSON() {\n    return { $maxKey: 1 };\n  }\n\n  /**\n   * @ignore\n   */\n  static fromExtendedJSON() {\n    return new MaxKey();\n  }\n}\n\nObject.defineProperty(MaxKey.prototype, '_bsontype', { value: 'MaxKey' });\nmodule.exports = MaxKey;\n","\n\n/**\n * A class representation of the BSON DBRef type.\n */\nclass DBRef {\n  /**\n   * Create a DBRef type\n   *\n   * @param {string} collection the collection name.\n   * @param {ObjectId} oid the reference ObjectId.\n   * @param {string} [db] optional db name, if omitted the reference is local to the current db.\n   * @return {DBRef}\n   */\n  constructor(collection, oid, db, fields) {\n    // check if namespace has been provided\n    const parts = collection.split('.');\n    if (parts.length === 2) {\n      db = parts.shift();\n      collection = parts.shift();\n    }\n\n    this.collection = collection;\n    this.oid = oid;\n    this.db = db;\n    this.fields = fields || {};\n  }\n\n  /**\n   * @ignore\n   * @api private\n   */\n  toJSON() {\n    const o = Object.assign(\n      {\n        $ref: this.collection,\n        $id: this.oid\n      },\n      this.fields\n    );\n\n    if (this.db != null) o.$db = this.db;\n    return o;\n  }\n\n  /**\n   * @ignore\n   */\n  toExtendedJSON(options) {\n    options = options || {};\n    let o = {\n      $ref: this.collection,\n      $id: this.oid\n    };\n\n    if (options.legacy) {\n      return o;\n    }\n\n    if (this.db) o.$db = this.db;\n    o = Object.assign(o, this.fields);\n    return o;\n  }\n\n  /**\n   * @ignore\n   */\n  static fromExtendedJSON(doc) {\n    var copy = Object.assign({}, doc);\n    ['$ref', '$id', '$db'].forEach(k => delete copy[k]);\n    return new DBRef(doc.$ref, doc.$id, doc.$db, copy);\n  }\n}\n\nObject.defineProperty(DBRef.prototype, '_bsontype', { value: 'DBRef' });\n// the 1.x parser used a \"namespace\" property, while 4.x uses \"collection\". To ensure backwards\n// compatibility, let's expose \"namespace\"\nObject.defineProperty(DBRef.prototype, 'namespace', {\n  get() {\n    return this.collection;\n  },\n  set(val) {\n    this.collection = val;\n  },\n  configurable: false\n});\nmodule.exports = DBRef;\n","\n\nconst Buffer = require('buffer').Buffer;\n\n/**\n * A class representation of the BSON Binary type.\n */\nclass Binary {\n  /**\n   * Create a Binary type\n   *\n   * Sub types\n   *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.\n   *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.\n   *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.\n   *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.\n   *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.\n   *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.\n   *\n   * @param {Buffer} buffer a buffer object containing the binary data.\n   * @param {Number} [subType] the option binary type.\n   * @return {Binary}\n   */\n  constructor(buffer, subType) {\n    if (\n      buffer != null &&\n      !(typeof buffer === 'string') &&\n      !Buffer.isBuffer(buffer) &&\n      !(buffer instanceof Uint8Array) &&\n      !Array.isArray(buffer)\n    ) {\n      throw new TypeError('only String, Buffer, Uint8Array or Array accepted');\n    }\n\n    this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;\n    this.position = 0;\n\n    if (buffer != null && !(buffer instanceof Number)) {\n      // Only accept Buffer, Uint8Array or Arrays\n      if (typeof buffer === 'string') {\n        // Different ways of writing the length of the string for the different types\n        if (typeof Buffer !== 'undefined') {\n          this.buffer = Buffer.from(buffer);\n        } else if (typeof Uint8Array !== 'undefined' || Array.isArray(buffer)) {\n          this.buffer = writeStringToArray(buffer);\n        } else {\n          throw new TypeError('only String, Buffer, Uint8Array or Array accepted');\n        }\n      } else {\n        this.buffer = buffer;\n      }\n      this.position = buffer.length;\n    } else {\n      if (typeof Buffer !== 'undefined') {\n        this.buffer = Buffer.alloc(Binary.BUFFER_SIZE);\n      } else if (typeof Uint8Array !== 'undefined') {\n        this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));\n      } else {\n        this.buffer = new Array(Binary.BUFFER_SIZE);\n      }\n    }\n  }\n\n  /**\n   * Updates this binary with byte_value.\n   *\n   * @method\n   * @param {string} byte_value a single byte we wish to write.\n   */\n  put(byte_value) {\n    // If it's a string and a has more than one character throw an error\n    if (byte_value['length'] != null && typeof byte_value !== 'number' && byte_value.length !== 1)\n      throw new TypeError('only accepts single character String, Uint8Array or Array');\n    if ((typeof byte_value !== 'number' && byte_value < 0) || byte_value > 255)\n      throw new TypeError('only accepts number in a valid unsigned byte range 0-255');\n\n    // Decode the byte value once\n    let decoded_byte = null;\n    if (typeof byte_value === 'string') {\n      decoded_byte = byte_value.charCodeAt(0);\n    } else if (byte_value['length'] != null) {\n      decoded_byte = byte_value[0];\n    } else {\n      decoded_byte = byte_value;\n    }\n\n    if (this.buffer.length > this.position) {\n      this.buffer[this.position++] = decoded_byte;\n    } else {\n      if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n        // Create additional overflow buffer\n        let buffer = Buffer.alloc(Binary.BUFFER_SIZE + this.buffer.length);\n        // Combine the two buffers together\n        this.buffer.copy(buffer, 0, 0, this.buffer.length);\n        this.buffer = buffer;\n        this.buffer[this.position++] = decoded_byte;\n      } else {\n        let buffer = null;\n        // Create a new buffer (typed or normal array)\n        if (isUint8Array(this.buffer)) {\n          buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));\n        } else {\n          buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);\n        }\n\n        // We need to copy all the content to the new array\n        for (let i = 0; i < this.buffer.length; i++) {\n          buffer[i] = this.buffer[i];\n        }\n\n        // Reassign the buffer\n        this.buffer = buffer;\n        // Write the byte\n        this.buffer[this.position++] = decoded_byte;\n      }\n    }\n  }\n\n  /**\n   * Writes a buffer or string to the binary.\n   *\n   * @method\n   * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.\n   * @param {number} offset specify the binary of where to write the content.\n   * @return {null}\n   */\n  write(string, offset) {\n    offset = typeof offset === 'number' ? offset : this.position;\n\n    // If the buffer is to small let's extend the buffer\n    if (this.buffer.length < offset + string.length) {\n      let buffer = null;\n      // If we are in node.js\n      if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n        buffer = Buffer.alloc(this.buffer.length + string.length);\n        this.buffer.copy(buffer, 0, 0, this.buffer.length);\n      } else if (isUint8Array(this.buffer)) {\n        // Create a new buffer\n        buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length));\n        // Copy the content\n        for (let i = 0; i < this.position; i++) {\n          buffer[i] = this.buffer[i];\n        }\n      }\n\n      // Assign the new buffer\n      this.buffer = buffer;\n    }\n\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {\n      string.copy(this.buffer, offset, 0, string.length);\n      this.position =\n        offset + string.length > this.position ? offset + string.length : this.position;\n      // offset = string.length\n    } else if (\n      typeof Buffer !== 'undefined' &&\n      typeof string === 'string' &&\n      Buffer.isBuffer(this.buffer)\n    ) {\n      this.buffer.write(string, offset, 'binary');\n      this.position =\n        offset + string.length > this.position ? offset + string.length : this.position;\n      // offset = string.length;\n    } else if (isUint8Array(string) || (Array.isArray(string) && typeof string !== 'string')) {\n      for (let i = 0; i < string.length; i++) {\n        this.buffer[offset++] = string[i];\n      }\n\n      this.position = offset > this.position ? offset : this.position;\n    } else if (typeof string === 'string') {\n      for (let i = 0; i < string.length; i++) {\n        this.buffer[offset++] = string.charCodeAt(i);\n      }\n\n      this.position = offset > this.position ? offset : this.position;\n    }\n  }\n\n  /**\n   * Reads **length** bytes starting at **position**.\n   *\n   * @method\n   * @param {number} position read from the given position in the Binary.\n   * @param {number} length the number of bytes to read.\n   * @return {Buffer}\n   */\n  read(position, length) {\n    length = length && length > 0 ? length : this.position;\n\n    // Let's return the data based on the type we have\n    if (this.buffer['slice']) {\n      return this.buffer.slice(position, position + length);\n    }\n\n    // Create a buffer to keep the result\n    const buffer =\n      typeof Uint8Array !== 'undefined'\n        ? new Uint8Array(new ArrayBuffer(length))\n        : new Array(length);\n    for (let i = 0; i < length; i++) {\n      buffer[i] = this.buffer[position++];\n    }\n\n    // Return the buffer\n    return buffer;\n  }\n\n  /**\n   * Returns the value of this binary as a string.\n   *\n   * @method\n   * @return {string}\n   */\n  value(asRaw) {\n    asRaw = asRaw == null ? false : asRaw;\n\n    // Optimize to serialize for the situation where the data == size of buffer\n    if (\n      asRaw &&\n      typeof Buffer !== 'undefined' &&\n      Buffer.isBuffer(this.buffer) &&\n      this.buffer.length === this.position\n    )\n      return this.buffer;\n\n    // If it's a node.js buffer object\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n      return asRaw\n        ? this.buffer.slice(0, this.position)\n        : this.buffer.toString('binary', 0, this.position);\n    } else {\n      if (asRaw) {\n        // we support the slice command use it\n        if (this.buffer['slice'] != null) {\n          return this.buffer.slice(0, this.position);\n        } else {\n          // Create a new buffer to copy content to\n          const newBuffer = isUint8Array(this.buffer)\n            ? new Uint8Array(new ArrayBuffer(this.position))\n            : new Array(this.position);\n\n          // Copy content\n          for (let i = 0; i < this.position; i++) {\n            newBuffer[i] = this.buffer[i];\n          }\n\n          // Return the buffer\n          return newBuffer;\n        }\n      } else {\n        return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);\n      }\n    }\n  }\n\n  /**\n   * Length.\n   *\n   * @method\n   * @return {number} the length of the binary.\n   */\n  length() {\n    return this.position;\n  }\n\n  /**\n   * @ignore\n   */\n  toJSON() {\n    return this.buffer != null ? this.buffer.toString('base64') : '';\n  }\n\n  /**\n   * @ignore\n   */\n  toString(format) {\n    return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';\n  }\n\n  /**\n   * @ignore\n   */\n  toExtendedJSON(options) {\n    options = options || {};\n    const base64String = Buffer.isBuffer(this.buffer)\n      ? this.buffer.toString('base64')\n      : Buffer.from(this.buffer).toString('base64');\n\n    const subType = Number(this.sub_type).toString(16);\n    if (options.legacy) {\n      return {\n        $binary: base64String,\n        $type: subType.length === 1 ? '0' + subType : subType\n      };\n    }\n    return {\n      $binary: {\n        base64: base64String,\n        subType: subType.length === 1 ? '0' + subType : subType\n      }\n    };\n  }\n\n  /**\n   * @ignore\n   */\n  static fromExtendedJSON(doc, options) {\n    options = options || {};\n    let data, type;\n    if (options.legacy) {\n      type = doc.$type ? parseInt(doc.$type, 16) : 0;\n      data = Buffer.from(doc.$binary, 'base64');\n    } else {\n      type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;\n      data = Buffer.from(doc.$binary.base64, 'base64');\n    }\n    return new Binary(data, type);\n  }\n}\n\n/**\n * Binary default subtype\n * @ignore\n */\nconst BSON_BINARY_SUBTYPE_DEFAULT = 0;\n\nfunction isUint8Array(obj) {\n  return Object.prototype.toString.call(obj) === '[object Uint8Array]';\n}\n\n/**\n * @ignore\n */\nfunction writeStringToArray(data) {\n  // Create a buffer\n  const buffer =\n    typeof Uint8Array !== 'undefined'\n      ? new Uint8Array(new ArrayBuffer(data.length))\n      : new Array(data.length);\n\n  // Write the content to the buffer\n  for (let i = 0; i < data.length; i++) {\n    buffer[i] = data.charCodeAt(i);\n  }\n  // Write the string to the buffer\n  return buffer;\n}\n\n/**\n * Convert Array ot Uint8Array to Binary String\n *\n * @ignore\n */\nfunction convertArraytoUtf8BinaryString(byteArray, startIndex, endIndex) {\n  let result = '';\n  for (let i = startIndex; i < endIndex; i++) {\n    result = result + String.fromCharCode(byteArray[i]);\n  }\n\n  return result;\n}\n\nBinary.BUFFER_SIZE = 256;\n\n/**\n * Default BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_DEFAULT = 0;\n/**\n * Function BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_FUNCTION = 1;\n/**\n * Byte Array BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_BYTE_ARRAY = 2;\n/**\n * OLD UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID_OLD = 3;\n/**\n * UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID = 4;\n/**\n * MD5 BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_MD5 = 5;\n/**\n * User BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_USER_DEFINED = 128;\n\nObject.defineProperty(Binary.prototype, '_bsontype', { value: 'Binary' });\nmodule.exports = Binary;\n","\n\nmodule.exports = {\n  // BSON MAX VALUES\n  BSON_INT32_MAX: 0x7fffffff,\n  BSON_INT32_MIN: -0x80000000,\n\n  BSON_INT64_MAX: Math.pow(2, 63) - 1,\n  BSON_INT64_MIN: -Math.pow(2, 63),\n\n  // JS MAX PRECISE VALUES\n  JS_INT_MAX: 0x20000000000000, // Any integer up to 2^53 can be precisely represented by a double.\n  JS_INT_MIN: -0x20000000000000, // Any integer down to -2^53 can be precisely represented by a double.\n\n  /**\n   * Number BSON Type\n   *\n   * @classconstant BSON_DATA_NUMBER\n   **/\n  BSON_DATA_NUMBER: 1,\n\n  /**\n   * String BSON Type\n   *\n   * @classconstant BSON_DATA_STRING\n   **/\n  BSON_DATA_STRING: 2,\n\n  /**\n   * Object BSON Type\n   *\n   * @classconstant BSON_DATA_OBJECT\n   **/\n  BSON_DATA_OBJECT: 3,\n\n  /**\n   * Array BSON Type\n   *\n   * @classconstant BSON_DATA_ARRAY\n   **/\n  BSON_DATA_ARRAY: 4,\n\n  /**\n   * Binary BSON Type\n   *\n   * @classconstant BSON_DATA_BINARY\n   **/\n  BSON_DATA_BINARY: 5,\n\n  /**\n   * Binary BSON Type\n   *\n   * @classconstant BSON_DATA_UNDEFINED\n   **/\n  BSON_DATA_UNDEFINED: 6,\n\n  /**\n   * ObjectId BSON Type\n   *\n   * @classconstant BSON_DATA_OID\n   **/\n  BSON_DATA_OID: 7,\n\n  /**\n   * Boolean BSON Type\n   *\n   * @classconstant BSON_DATA_BOOLEAN\n   **/\n  BSON_DATA_BOOLEAN: 8,\n\n  /**\n   * Date BSON Type\n   *\n   * @classconstant BSON_DATA_DATE\n   **/\n  BSON_DATA_DATE: 9,\n\n  /**\n   * null BSON Type\n   *\n   * @classconstant BSON_DATA_NULL\n   **/\n  BSON_DATA_NULL: 10,\n\n  /**\n   * RegExp BSON Type\n   *\n   * @classconstant BSON_DATA_REGEXP\n   **/\n  BSON_DATA_REGEXP: 11,\n\n  /**\n   * Code BSON Type\n   *\n   * @classconstant BSON_DATA_DBPOINTER\n   **/\n  BSON_DATA_DBPOINTER: 12,\n\n  /**\n   * Code BSON Type\n   *\n   * @classconstant BSON_DATA_CODE\n   **/\n  BSON_DATA_CODE: 13,\n\n  /**\n   * Symbol BSON Type\n   *\n   * @classconstant BSON_DATA_SYMBOL\n   **/\n  BSON_DATA_SYMBOL: 14,\n\n  /**\n   * Code with Scope BSON Type\n   *\n   * @classconstant BSON_DATA_CODE_W_SCOPE\n   **/\n  BSON_DATA_CODE_W_SCOPE: 15,\n\n  /**\n   * 32 bit Integer BSON Type\n   *\n   * @classconstant BSON_DATA_INT\n   **/\n  BSON_DATA_INT: 16,\n\n  /**\n   * Timestamp BSON Type\n   *\n   * @classconstant BSON_DATA_TIMESTAMP\n   **/\n  BSON_DATA_TIMESTAMP: 17,\n\n  /**\n   * Long BSON Type\n   *\n   * @classconstant BSON_DATA_LONG\n   **/\n  BSON_DATA_LONG: 18,\n\n  /**\n   * Long BSON Type\n   *\n   * @classconstant BSON_DATA_DECIMAL128\n   **/\n  BSON_DATA_DECIMAL128: 19,\n\n  /**\n   * MinKey BSON Type\n   *\n   * @classconstant BSON_DATA_MIN_KEY\n   **/\n  BSON_DATA_MIN_KEY: 0xff,\n\n  /**\n   * MaxKey BSON Type\n   *\n   * @classconstant BSON_DATA_MAX_KEY\n   **/\n  BSON_DATA_MAX_KEY: 0x7f,\n\n  /**\n   * Binary Default Type\n   *\n   * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n   **/\n  BSON_BINARY_SUBTYPE_DEFAULT: 0,\n\n  /**\n   * Binary Function Type\n   *\n   * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n   **/\n  BSON_BINARY_SUBTYPE_FUNCTION: 1,\n\n  /**\n   * Binary Byte Array Type\n   *\n   * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n   **/\n  BSON_BINARY_SUBTYPE_BYTE_ARRAY: 2,\n\n  /**\n   * Binary UUID Type\n   *\n   * @classconstant BSON_BINARY_SUBTYPE_UUID\n   **/\n  BSON_BINARY_SUBTYPE_UUID: 3,\n\n  /**\n   * Binary MD5 Type\n   *\n   * @classconstant BSON_BINARY_SUBTYPE_MD5\n   **/\n  BSON_BINARY_SUBTYPE_MD5: 4,\n\n  /**\n   * Binary User Defined Type\n   *\n   * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n   **/\n  BSON_BINARY_SUBTYPE_USER_DEFINED: 128\n};\n","\n\n// const Buffer = require('buffer').Buffer;\n// const Map = require('./map');\nconst Long = require('./long');\nconst Double = require('./double');\nconst Timestamp = require('./timestamp');\nconst ObjectId = require('./objectid');\nconst BSONRegExp = require('./regexp');\nconst Symbol = require('./symbol');\nconst Int32 = require('./int_32');\nconst Code = require('./code');\nconst Decimal128 = require('./decimal128');\nconst MinKey = require('./min_key');\nconst MaxKey = require('./max_key');\nconst DBRef = require('./db_ref');\nconst Binary = require('./binary');\n\n/**\n * @namespace EJSON\n */\n\n// all the types where we don't need to do any special processing and can just pass the EJSON\n//straight to type.fromExtendedJSON\nconst keysToCodecs = {\n  $oid: ObjectId,\n  $binary: Binary,\n  $symbol: Symbol,\n  $numberInt: Int32,\n  $numberDecimal: Decimal128,\n  $numberDouble: Double,\n  $numberLong: Long,\n  $minKey: MinKey,\n  $maxKey: MaxKey,\n  $regex: BSONRegExp,\n  $regularExpression: BSONRegExp,\n  $timestamp: Timestamp\n};\n\nfunction deserializeValue(self, key, value, options) {\n  if (typeof value === 'number') {\n    if (options.relaxed || options.legacy) {\n      return value;\n    }\n\n    // if it's an integer, should interpret as smallest BSON integer\n    // that can represent it exactly. (if out of range, interpret as double.)\n    if (Math.floor(value) === value) {\n      if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) return new Int32(value);\n      if (value >= BSON_INT64_MIN && value <= BSON_INT64_MAX) return new Long.fromNumber(value);\n    }\n\n    // If the number is a non-integer or out of integer range, should interpret as BSON Double.\n    return new Double(value);\n  }\n\n  // from here on out we're looking for bson types, so bail if its not an object\n  if (value == null || typeof value !== 'object') return value;\n\n  // upgrade deprecated undefined to null\n  if (value.$undefined) return null;\n\n  const keys = Object.keys(value).filter(k => k.startsWith('$') && value[k] != null);\n  for (let i = 0; i < keys.length; i++) {\n    let c = keysToCodecs[keys[i]];\n    if (c) return c.fromExtendedJSON(value, options);\n  }\n\n  if (value.$date != null) {\n    const d = value.$date;\n    const date = new Date();\n\n    if (options.legacy) {\n      if (typeof d === 'number') date.setTime(d);\n      else if (typeof d === 'string') date.setTime(Date.parse(d));\n    } else {\n      if (typeof d === 'string') date.setTime(Date.parse(d));\n      else if (Long.isLong(d)) date.setTime(d.toNumber());\n      else if (typeof d === 'number' && options.relaxed) date.setTime(d);\n    }\n    return date;\n  }\n\n  if (value.$code != null) {\n    let copy = Object.assign({}, value);\n    if (value.$scope) {\n      copy.$scope = deserializeValue(self, null, value.$scope);\n    }\n\n    return Code.fromExtendedJSON(value);\n  }\n\n  if (value.$ref != null || value.$dbPointer != null) {\n    let v = value.$ref ? value : value.$dbPointer;\n\n    // we run into this in a \"degenerate EJSON\" case (with $id and $ref order flipped)\n    // because of the order JSON.parse goes through the document\n    if (v instanceof DBRef) return v;\n\n    const dollarKeys = Object.keys(v).filter(k => k.startsWith('$'));\n    let valid = true;\n    dollarKeys.forEach(k => {\n      if (['$ref', '$id', '$db'].indexOf(k) === -1) valid = false;\n    });\n\n    // only make DBRef if $ keys are all valid\n    if (valid) return DBRef.fromExtendedJSON(v);\n  }\n\n  return value;\n}\n\n/**\n * Parse an Extended JSON string, constructing the JavaScript value or object described by that\n * string.\n *\n * @memberof EJSON\n * @param {string} text\n * @param {object} [options] Optional settings\n * @param {boolean} [options.relaxed=true] Attempt to return native JS types where possible, rather than BSON types (if true)\n * @return {object}\n *\n * @example\n * const { EJSON } = require('bson');\n * const text = '{ \"int32\": { \"$numberInt\": \"10\" } }';\n *\n * // prints { int32: { [String: '10'] _bsontype: 'Int32', value: '10' } }\n * console.log(EJSON.parse(text, { relaxed: false }));\n *\n * // prints { int32: 10 }\n * console.log(EJSON.parse(text));\n */\nfunction parse(text, options) {\n  options = Object.assign({}, { relaxed: true, legacy: false }, options);\n\n  // relaxed implies not strict\n  if (typeof options.relaxed === 'boolean') options.strict = !options.relaxed;\n  if (typeof options.strict === 'boolean') options.relaxed = !options.strict;\n\n  return JSON.parse(text, (key, value) => deserializeValue(this, key, value, options));\n}\n\n//\n// Serializer\n//\n\n// MAX INT32 boundaries\nconst BSON_INT32_MAX = 0x7fffffff,\n  BSON_INT32_MIN = -0x80000000,\n  BSON_INT64_MAX = 0x7fffffffffffffff,\n  BSON_INT64_MIN = -0x8000000000000000;\n\n/**\n * Converts a BSON document to an Extended JSON string, optionally replacing values if a replacer\n * function is specified or optionally including only the specified properties if a replacer array\n * is specified.\n *\n * @memberof EJSON\n * @param {object} value The value to convert to extended JSON\n * @param {function|array} [replacer] A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string\n * @param {string|number} [space] A String or Number object that's used to insert white space into the output JSON string for readability purposes.\n * @param {object} [options] Optional settings\n * @param {boolean} [options.relaxed=true] Enabled Extended JSON's `relaxed` mode\n * @param {boolean} [options.legacy=false] Output using the Extended JSON v1 spec\n * @returns {string}\n *\n * @example\n * const { EJSON } = require('bson');\n * const Int32 = require('mongodb').Int32;\n * const doc = { int32: new Int32(10) };\n *\n * // prints '{\"int32\":{\"$numberInt\":\"10\"}}'\n * console.log(EJSON.stringify(doc, { relaxed: false }));\n *\n * // prints '{\"int32\":10}'\n * console.log(EJSON.stringify(doc));\n */\nfunction stringify(value, replacer, space, options) {\n  if (space != null && typeof space === 'object') {\n    options = space;\n    space = 0;\n  }\n  if (replacer != null && typeof replacer === 'object' && !Array.isArray(replacer)) {\n    options = replacer;\n    replacer = null;\n    space = 0;\n  }\n  options = Object.assign({}, { relaxed: true, legacy: false }, options);\n\n  const doc = Array.isArray(value)\n    ? serializeArray(value, options)\n    : serializeDocument(value, options);\n\n  return JSON.stringify(doc, replacer, space);\n}\n\n/**\n * Serializes an object to an Extended JSON string, and reparse it as a JavaScript object.\n *\n * @memberof EJSON\n * @param {object} bson The object to serialize\n * @param {object} [options] Optional settings passed to the `stringify` function\n * @return {object}\n */\nfunction serialize(bson, options) {\n  options = options || {};\n  return JSON.parse(stringify(bson, options));\n}\n\n/**\n * Deserializes an Extended JSON object into a plain JavaScript object with native/BSON types\n *\n * @memberof EJSON\n * @param {object} ejson The Extended JSON object to deserialize\n * @param {object} [options] Optional settings passed to the parse method\n * @return {object}\n */\nfunction deserialize(ejson, options) {\n  options = options || {};\n  return parse(JSON.stringify(ejson), options);\n}\n\nfunction serializeArray(array, options) {\n  return array.map(v => serializeValue(v, options));\n}\n\nfunction getISOString(date) {\n  const isoStr = date.toISOString();\n  // we should only show milliseconds in timestamp if they're non-zero\n  return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';\n}\n\nfunction serializeValue(value, options) {\n  if (Array.isArray(value)) return serializeArray(value, options);\n\n  if (value === undefined) return null;\n\n  if (value instanceof Date) {\n    let dateNum = value.getTime(),\n      // is it in year range 1970-9999?\n      inRange = dateNum > -1 && dateNum < 253402318800000;\n\n    if (options.legacy) {\n      return options.relaxed && inRange\n        ? { $date: value.getTime() }\n        : { $date: getISOString(value) };\n    }\n    return options.relaxed && inRange\n      ? { $date: getISOString(value) }\n      : { $date: { $numberLong: value.getTime().toString() } };\n  }\n\n  if (typeof value === 'number' && !options.relaxed) {\n    // it's an integer\n    if (Math.floor(value) === value) {\n      let int32Range = value >= BSON_INT32_MIN && value <= BSON_INT32_MAX,\n        int64Range = value >= BSON_INT64_MIN && value <= BSON_INT64_MAX;\n\n      // interpret as being of the smallest BSON integer type that can represent the number exactly\n      if (int32Range) return { $numberInt: value.toString() };\n      if (int64Range) return { $numberLong: value.toString() };\n    }\n    return { $numberDouble: value.toString() };\n  }\n\n  if (value instanceof RegExp) {\n    let flags = value.flags;\n    if (flags === undefined) {\n      flags = value.toString().match(/[gimuy]*$/)[0];\n    }\n\n    const rx = new BSONRegExp(value.source, flags);\n    return rx.toExtendedJSON(options);\n  }\n\n  if (value != null && typeof value === 'object') return serializeDocument(value, options);\n  return value;\n}\n\nconst BSON_TYPE_MAPPINGS = {\n  Binary: o => new Binary(o.value(), o.subtype),\n  Code: o => new Code(o.code, o.scope),\n  DBRef: o => new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields), // \"namespace\" for 1.x library backwards compat\n  Decimal128: o => new Decimal128(o.bytes),\n  Double: o => new Double(o.value),\n  Int32: o => new Int32(o.value),\n  Long: o =>\n    Long.fromBits(\n      // underscore variants for 1.x backwards compatibility\n      o.low != null ? o.low : o.low_,\n      o.low != null ? o.high : o.high_,\n      o.low != null ? o.unsigned : o.unsigned_\n    ),\n  MaxKey: () => new MaxKey(),\n  MinKey: () => new MinKey(),\n  ObjectID: o => new ObjectId(o),\n  ObjectId: o => new ObjectId(o), // support 4.0.0/4.0.1 before _bsontype was reverted back to ObjectID\n  BSONRegExp: o => new BSONRegExp(o.pattern, o.options),\n  Symbol: o => new Symbol(o.value),\n  Timestamp: o => Timestamp.fromBits(o.low, o.high)\n};\n\nfunction serializeDocument(doc, options) {\n  if (doc == null || typeof doc !== 'object') throw new Error('not an object instance');\n\n  const bsontype = doc._bsontype;\n  if (typeof bsontype === 'undefined') {\n    // It's a regular object. Recursively serialize its property values.\n    const _doc = {};\n    for (let name in doc) {\n      _doc[name] = serializeValue(doc[name], options);\n    }\n    return _doc;\n  } else if (typeof bsontype === 'string') {\n    // the \"document\" is really just a BSON type object\n    let _doc = doc;\n    if (typeof _doc.toExtendedJSON !== 'function') {\n      // There's no EJSON serialization function on the object. It's probably an\n      // object created by a previous version of this library (or another library)\n      // that's duck-typing objects to look like they were generated by this library).\n      // Copy the object into this library's version of that type.\n      const mapper = BSON_TYPE_MAPPINGS[bsontype];\n      if (!mapper) {\n        throw new TypeError('Unrecognized or invalid _bsontype: ' + bsontype);\n      }\n      _doc = mapper(_doc);\n    }\n\n    // Two BSON types may have nested objects that may need to be serialized too\n    if (bsontype === 'Code' && _doc.scope) {\n      _doc = new Code(_doc.code, serializeValue(_doc.scope, options));\n    } else if (bsontype === 'DBRef' && _doc.oid) {\n      _doc = new DBRef(_doc.collection, serializeValue(_doc.oid, options), _doc.db, _doc.fields);\n    }\n\n    return _doc.toExtendedJSON(options);\n  } else {\n    throw new Error('_bsontype must be a string, but was: ' + typeof bsontype);\n  }\n}\n\nmodule.exports = {\n  parse,\n  deserialize,\n  serialize,\n  stringify\n};\n","\n\nconst Buffer = require('buffer').Buffer;\nconst Long = require('../long');\nconst Double = require('../double');\nconst Timestamp = require('../timestamp');\nconst ObjectId = require('../objectid');\nconst Code = require('../code');\nconst MinKey = require('../min_key');\nconst MaxKey = require('../max_key');\nconst Decimal128 = require('../decimal128');\nconst Int32 = require('../int_32');\nconst DBRef = require('../db_ref');\nconst BSONRegExp = require('../regexp');\nconst BSONSymbol = require('../symbol');\nconst Binary = require('../binary');\nconst constants = require('../constants');\nconst validateUtf8 = require('../validate_utf8').validateUtf8;\n\n// Internal long versions\nconst JS_INT_MAX_LONG = Long.fromNumber(constants.JS_INT_MAX);\nconst JS_INT_MIN_LONG = Long.fromNumber(constants.JS_INT_MIN);\n\nconst functionCache = {};\n\nfunction deserialize(buffer, options, isArray) {\n  options = options == null ? {} : options;\n  const index = options && options.index ? options.index : 0;\n  // Read the document size\n  const size =\n    buffer[index] |\n    (buffer[index + 1] << 8) |\n    (buffer[index + 2] << 16) |\n    (buffer[index + 3] << 24);\n\n  if (size < 5) {\n    throw new Error(`bson size must be >= 5, is ${size}`);\n  }\n\n  if (options.allowObjectSmallerThanBufferSize && buffer.length < size) {\n    throw new Error(`buffer length ${buffer.length} must be >= bson size ${size}`);\n  }\n\n  if (!options.allowObjectSmallerThanBufferSize && buffer.length !== size) {\n    throw new Error(`buffer length ${buffer.length} must === bson size ${size}`);\n  }\n\n  if (size + index > buffer.length) {\n    throw new Error(\n      `(bson size ${size} + options.index ${index} must be <= buffer length ${Buffer.byteLength(\n        buffer\n      )})`\n    );\n  }\n\n  // Illegal end value\n  if (buffer[index + size - 1] !== 0) {\n    throw new Error(\"One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00\");\n  }\n\n  // Start deserializtion\n  return deserializeObject(buffer, index, options, isArray);\n}\n\nfunction deserializeObject(buffer, index, options, isArray) {\n  const evalFunctions = options['evalFunctions'] == null ? false : options['evalFunctions'];\n  const cacheFunctions = options['cacheFunctions'] == null ? false : options['cacheFunctions'];\n  const cacheFunctionsCrc32 =\n    options['cacheFunctionsCrc32'] == null ? false : options['cacheFunctionsCrc32'];\n\n  if (!cacheFunctionsCrc32) var crc32 = null;\n\n  const fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw'];\n\n  // Return raw bson buffer instead of parsing it\n  const raw = options['raw'] == null ? false : options['raw'];\n\n  // Return BSONRegExp objects instead of native regular expressions\n  const bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false;\n\n  // Controls the promotion of values vs wrapper classes\n  const promoteBuffers = options['promoteBuffers'] == null ? false : options['promoteBuffers'];\n  const promoteLongs = options['promoteLongs'] == null ? true : options['promoteLongs'];\n  const promoteValues = options['promoteValues'] == null ? true : options['promoteValues'];\n\n  // Set the start index\n  let startIndex = index;\n\n  // Validate that we have at least 4 bytes of buffer\n  if (buffer.length < 5) throw new Error('corrupt bson message < 5 bytes long');\n\n  // Read the document size\n  const size =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Ensure buffer is valid size\n  if (size < 5 || size > buffer.length) throw new Error('corrupt bson message');\n\n  // Create holding object\n  const object = isArray ? [] : {};\n  // Used for arrays to skip having to perform utf8 decoding\n  let arrayIndex = 0;\n  let done = false;\n\n  // While we have more left data left keep parsing\n  while (!done) {\n    // Read the type\n    const elementType = buffer[index++];\n\n    // If we get a zero it's the last byte, exit\n    if (elementType === 0) break;\n\n    // Get the start search index\n    let i = index;\n    // Locate the end of the c string\n    while (buffer[i] !== 0x00 && i < buffer.length) {\n      i++;\n    }\n\n    // If are at the end of the buffer there is a problem with the document\n    if (i >= Buffer.byteLength(buffer)) throw new Error('Bad BSON Document: illegal CString');\n    const name = isArray ? arrayIndex++ : buffer.toString('utf8', index, i);\n\n    index = i + 1;\n\n    if (elementType === constants.BSON_DATA_STRING) {\n      const stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n\n      if (!validateUtf8(buffer, index, index + stringSize - 1)) {\n        throw new Error('Invalid UTF-8 string in BSON document');\n      }\n\n      const s = buffer.toString('utf8', index, index + stringSize - 1);\n\n      object[name] = s;\n      index = index + stringSize;\n    } else if (elementType === constants.BSON_DATA_OID) {\n      const oid = Buffer.alloc(12);\n      buffer.copy(oid, 0, index, index + 12);\n      object[name] = new ObjectId(oid);\n      index = index + 12;\n    } else if (elementType === constants.BSON_DATA_INT && promoteValues === false) {\n      object[name] = new Int32(\n        buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24)\n      );\n    } else if (elementType === constants.BSON_DATA_INT) {\n      object[name] =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n    } else if (elementType === constants.BSON_DATA_NUMBER && promoteValues === false) {\n      object[name] = new Double(buffer.readDoubleLE(index));\n      index = index + 8;\n    } else if (elementType === constants.BSON_DATA_NUMBER) {\n      object[name] = buffer.readDoubleLE(index);\n      index = index + 8;\n    } else if (elementType === constants.BSON_DATA_DATE) {\n      const lowBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      const highBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      object[name] = new Date(new Long(lowBits, highBits).toNumber());\n    } else if (elementType === constants.BSON_DATA_BOOLEAN) {\n      if (buffer[index] !== 0 && buffer[index] !== 1) throw new Error('illegal boolean type value');\n      object[name] = buffer[index++] === 1;\n    } else if (elementType === constants.BSON_DATA_OBJECT) {\n      const _index = index;\n      const objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      if (objectSize <= 0 || objectSize > buffer.length - index)\n        throw new Error('bad embedded document length in bson');\n\n      // We have a raw value\n      if (raw) {\n        object[name] = buffer.slice(index, index + objectSize);\n      } else {\n        object[name] = deserializeObject(buffer, _index, options, false);\n      }\n\n      index = index + objectSize;\n    } else if (elementType === constants.BSON_DATA_ARRAY) {\n      const _index = index;\n      const objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      let arrayOptions = options;\n\n      // Stop index\n      const stopIndex = index + objectSize;\n\n      // All elements of array to be returned as raw bson\n      if (fieldsAsRaw && fieldsAsRaw[name]) {\n        arrayOptions = {};\n        for (let n in options) arrayOptions[n] = options[n];\n        arrayOptions['raw'] = true;\n      }\n\n      object[name] = deserializeObject(buffer, _index, arrayOptions, true);\n      index = index + objectSize;\n\n      if (buffer[index - 1] !== 0) throw new Error('invalid array terminator byte');\n      if (index !== stopIndex) throw new Error('corrupted array bson');\n    } else if (elementType === constants.BSON_DATA_UNDEFINED) {\n      object[name] = undefined;\n    } else if (elementType === constants.BSON_DATA_NULL) {\n      object[name] = null;\n    } else if (elementType === constants.BSON_DATA_LONG) {\n      // Unpack the low and high bits\n      const lowBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      const highBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      const long = new Long(lowBits, highBits);\n      // Promote the long if possible\n      if (promoteLongs && promoteValues === true) {\n        object[name] =\n          long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG)\n            ? long.toNumber()\n            : long;\n      } else {\n        object[name] = long;\n      }\n    } else if (elementType === constants.BSON_DATA_DECIMAL128) {\n      // Buffer to contain the decimal bytes\n      const bytes = Buffer.alloc(16);\n      // Copy the next 16 bytes into the bytes buffer\n      buffer.copy(bytes, 0, index, index + 16);\n      // Update index\n      index = index + 16;\n      // Assign the new Decimal128 value\n      const decimal128 = new Decimal128(bytes);\n      // If we have an alternative mapper use that\n      object[name] = decimal128.toObject ? decimal128.toObject() : decimal128;\n    } else if (elementType === constants.BSON_DATA_BINARY) {\n      let binarySize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      const totalBinarySize = binarySize;\n      const subType = buffer[index++];\n\n      // Did we have a negative binary size, throw\n      if (binarySize < 0) throw new Error('Negative binary type element size found');\n\n      // Is the length longer than the document\n      if (binarySize > Buffer.byteLength(buffer))\n        throw new Error('Binary type size larger than document size');\n\n      // Decode as raw Buffer object if options specifies it\n      if (buffer['slice'] != null) {\n        // If we have subtype 2 skip the 4 bytes for the size\n        if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n          binarySize =\n            buffer[index++] |\n            (buffer[index++] << 8) |\n            (buffer[index++] << 16) |\n            (buffer[index++] << 24);\n          if (binarySize < 0)\n            throw new Error('Negative binary type element size found for subtype 0x02');\n          if (binarySize > totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to long binary size');\n          if (binarySize < totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to short binary size');\n        }\n\n        if (promoteBuffers && promoteValues) {\n          object[name] = buffer.slice(index, index + binarySize);\n        } else {\n          object[name] = new Binary(buffer.slice(index, index + binarySize), subType);\n        }\n      } else {\n        const _buffer =\n          typeof Uint8Array !== 'undefined'\n            ? new Uint8Array(new ArrayBuffer(binarySize))\n            : new Array(binarySize);\n        // If we have subtype 2 skip the 4 bytes for the size\n        if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n          binarySize =\n            buffer[index++] |\n            (buffer[index++] << 8) |\n            (buffer[index++] << 16) |\n            (buffer[index++] << 24);\n          if (binarySize < 0)\n            throw new Error('Negative binary type element size found for subtype 0x02');\n          if (binarySize > totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to long binary size');\n          if (binarySize < totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to short binary size');\n        }\n\n        // Copy the data\n        for (i = 0; i < binarySize; i++) {\n          _buffer[i] = buffer[index + i];\n        }\n\n        if (promoteBuffers && promoteValues) {\n          object[name] = _buffer;\n        } else {\n          object[name] = new Binary(_buffer, subType);\n        }\n      }\n\n      // Update the index\n      index = index + binarySize;\n    } else if (elementType === constants.BSON_DATA_REGEXP && bsonRegExp === false) {\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      const source = buffer.toString('utf8', index, i);\n      // Create the regexp\n      index = i + 1;\n\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      const regExpOptions = buffer.toString('utf8', index, i);\n      index = i + 1;\n\n      // For each option add the corresponding one for javascript\n      const optionsArray = new Array(regExpOptions.length);\n\n      // Parse options\n      for (i = 0; i < regExpOptions.length; i++) {\n        switch (regExpOptions[i]) {\n          case 'm':\n            optionsArray[i] = 'm';\n            break;\n          case 's':\n            optionsArray[i] = 'g';\n            break;\n          case 'i':\n            optionsArray[i] = 'i';\n            break;\n        }\n      }\n\n      object[name] = new RegExp(source, optionsArray.join(''));\n    } else if (elementType === constants.BSON_DATA_REGEXP && bsonRegExp === true) {\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      const source = buffer.toString('utf8', index, i);\n      index = i + 1;\n\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      const regExpOptions = buffer.toString('utf8', index, i);\n      index = i + 1;\n\n      // Set the object\n      object[name] = new BSONRegExp(source, regExpOptions);\n    } else if (elementType === constants.BSON_DATA_SYMBOL) {\n      const stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n      const symbol = buffer.toString('utf8', index, index + stringSize - 1);\n      object[name] = promoteValues ? symbol : new BSONSymbol(symbol);\n      index = index + stringSize;\n    } else if (elementType === constants.BSON_DATA_TIMESTAMP) {\n      const lowBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      const highBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n\n      object[name] = new Timestamp(lowBits, highBits);\n    } else if (elementType === constants.BSON_DATA_MIN_KEY) {\n      object[name] = new MinKey();\n    } else if (elementType === constants.BSON_DATA_MAX_KEY) {\n      object[name] = new MaxKey();\n    } else if (elementType === constants.BSON_DATA_CODE) {\n      const stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n      const functionString = buffer.toString('utf8', index, index + stringSize - 1);\n\n      // If we are evaluating the functions\n      if (evalFunctions) {\n        // If we have cache enabled let's look for the md5 of the function in the cache\n        if (cacheFunctions) {\n          const hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n          // Got to do this to avoid V8 deoptimizing the call due to finding eval\n          object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n        } else {\n          object[name] = isolateEval(functionString);\n        }\n      } else {\n        object[name] = new Code(functionString);\n      }\n\n      // Update parse index position\n      index = index + stringSize;\n    } else if (elementType === constants.BSON_DATA_CODE_W_SCOPE) {\n      const totalSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n\n      // Element cannot be shorter than totalSize + stringSize + documentSize + terminator\n      if (totalSize < 4 + 4 + 4 + 1) {\n        throw new Error('code_w_scope total size shorter minimum expected length');\n      }\n\n      // Get the code string size\n      const stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      // Check if we have a valid string\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n\n      // Javascript function\n      const functionString = buffer.toString('utf8', index, index + stringSize - 1);\n      // Update parse index position\n      index = index + stringSize;\n      // Parse the element\n      const _index = index;\n      // Decode the size of the object document\n      const objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      // Decode the scope object\n      const scopeObject = deserializeObject(buffer, _index, options, false);\n      // Adjust the index\n      index = index + objectSize;\n\n      // Check if field length is to short\n      if (totalSize < 4 + 4 + objectSize + stringSize) {\n        throw new Error('code_w_scope total size is to short, truncating scope');\n      }\n\n      // Check if totalSize field is to long\n      if (totalSize > 4 + 4 + objectSize + stringSize) {\n        throw new Error('code_w_scope total size is to long, clips outer document');\n      }\n\n      // If we are evaluating the functions\n      if (evalFunctions) {\n        // If we have cache enabled let's look for the md5 of the function in the cache\n        if (cacheFunctions) {\n          const hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n          // Got to do this to avoid V8 deoptimizing the call due to finding eval\n          object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n        } else {\n          object[name] = isolateEval(functionString);\n        }\n\n        object[name].scope = scopeObject;\n      } else {\n        object[name] = new Code(functionString, scopeObject);\n      }\n    } else if (elementType === constants.BSON_DATA_DBPOINTER) {\n      // Get the code string size\n      const stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      // Check if we have a valid string\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n      // Namespace\n      if (!validateUtf8(buffer, index, index + stringSize - 1)) {\n        throw new Error('Invalid UTF-8 string in BSON document');\n      }\n      const namespace = buffer.toString('utf8', index, index + stringSize - 1);\n      // Update parse index position\n      index = index + stringSize;\n\n      // Read the oid\n      const oidBuffer = Buffer.alloc(12);\n      buffer.copy(oidBuffer, 0, index, index + 12);\n      const oid = new ObjectId(oidBuffer);\n\n      // Update the index\n      index = index + 12;\n\n      // Upgrade to DBRef type\n      object[name] = new DBRef(namespace, oid);\n    } else {\n      throw new Error(\n        'Detected unknown BSON type ' +\n          elementType.toString(16) +\n          ' for fieldname \"' +\n          name +\n          '\", are you using the latest BSON parser?'\n      );\n    }\n  }\n\n  // Check if the deserialization was against a valid array/object\n  if (size !== index - startIndex) {\n    if (isArray) throw new Error('corrupt array bson');\n    throw new Error('corrupt object bson');\n  }\n\n  // check if object's $ keys are those of a DBRef\n  const dollarKeys = Object.keys(object).filter(k => k.startsWith('$'));\n  let valid = true;\n  dollarKeys.forEach(k => {\n    if (['$ref', '$id', '$db'].indexOf(k) === -1) valid = false;\n  });\n\n  // if a $key not in \"$ref\", \"$id\", \"$db\", don't make a DBRef\n  if (!valid) return object;\n\n  if (object['$id'] != null && object['$ref'] != null) {\n    let copy = Object.assign({}, object);\n    delete copy.$ref;\n    delete copy.$id;\n    delete copy.$db;\n    return new DBRef(object.$ref, object.$id, object.$db || null, copy);\n  }\n\n  return object;\n}\n\n/**\n * Ensure eval is isolated.\n *\n * @ignore\n * @api private\n */\nfunction isolateEvalWithHash(functionCache, hash, functionString, object) {\n  // Contains the value we are going to set\n  let value = null;\n\n  // Check for cache hit, eval if missing and return cached function\n  if (functionCache[hash] == null) {\n    eval('value = ' + functionString);\n    functionCache[hash] = value;\n  }\n\n  // Set the object\n  return functionCache[hash].bind(object);\n}\n\n/**\n * Ensure eval is isolated.\n *\n * @ignore\n * @api private\n */\nfunction isolateEval(functionString) {\n  // Contains the value we are going to set\n  let value = null;\n  // Eval the function\n  eval('value = ' + functionString);\n  return value;\n}\n\nmodule.exports = deserialize;\n","\n\nconst FIRST_BIT = 0x80;\nconst FIRST_TWO_BITS = 0xc0;\nconst FIRST_THREE_BITS = 0xe0;\nconst FIRST_FOUR_BITS = 0xf0;\nconst FIRST_FIVE_BITS = 0xf8;\n\nconst TWO_BIT_CHAR = 0xc0;\nconst THREE_BIT_CHAR = 0xe0;\nconst FOUR_BIT_CHAR = 0xf0;\nconst CONTINUING_CHAR = 0x80;\n\n/**\n * Determines if the passed in bytes are valid utf8\n * @param {Buffer|Uint8Array} bytes An array of 8-bit bytes. Must be indexable and have length property\n * @param {Number} start The index to start validating\n * @param {Number} end The index to end validating\n * @returns {boolean} True if valid utf8\n */\nfunction validateUtf8(bytes, start, end) {\n  let continuation = 0;\n\n  for (let i = start; i < end; i += 1) {\n    const byte = bytes[i];\n\n    if (continuation) {\n      if ((byte & FIRST_TWO_BITS) !== CONTINUING_CHAR) {\n        return false;\n      }\n      continuation -= 1;\n    } else if (byte & FIRST_BIT) {\n      if ((byte & FIRST_THREE_BITS) === TWO_BIT_CHAR) {\n        continuation = 1;\n      } else if ((byte & FIRST_FOUR_BITS) === THREE_BIT_CHAR) {\n        continuation = 2;\n      } else if ((byte & FIRST_FIVE_BITS) === FOUR_BIT_CHAR) {\n        continuation = 3;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return !continuation;\n}\n\nmodule.exports.validateUtf8 = validateUtf8;\n","\n\nconst Buffer = require('buffer').Buffer;\nconst writeIEEE754 = require('../float_parser').writeIEEE754;\nconst Long = require('../long');\nconst Map = require('../map');\nconst Binary = require('../binary');\nconst constants = require('../constants');\nconst normalizedFunctionString = require('./utils').normalizedFunctionString;\n\nconst regexp = /\\x00/; // eslint-disable-line no-control-regex\nconst ignoreKeys = new Set(['$db', '$ref', '$id', '$clusterTime']);\n\n// To ensure that 0.4 of node works correctly\nconst isDate = function isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n};\n\nconst isRegExp = function isRegExp(d) {\n  return Object.prototype.toString.call(d) === '[object RegExp]';\n};\n\nfunction serializeString(buffer, key, value, index, isArray) {\n  // Encode String type\n  buffer[index++] = constants.BSON_DATA_STRING;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes + 1;\n  buffer[index - 1] = 0;\n  // Write the string\n  const size = buffer.write(value, index + 4, 'utf8');\n  // Write the size of the string to buffer\n  buffer[index + 3] = ((size + 1) >> 24) & 0xff;\n  buffer[index + 2] = ((size + 1) >> 16) & 0xff;\n  buffer[index + 1] = ((size + 1) >> 8) & 0xff;\n  buffer[index] = (size + 1) & 0xff;\n  // Update index\n  index = index + 4 + size;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n}\n\nfunction serializeNumber(buffer, key, value, index, isArray) {\n  // We have an integer value\n  if (\n    Math.floor(value) === value &&\n    value >= constants.JS_INT_MIN &&\n    value <= constants.JS_INT_MAX\n  ) {\n    // If the value fits in 32 bits encode as int, if it fits in a double\n    // encode it as a double, otherwise long\n    if (value >= constants.BSON_INT32_MIN && value <= constants.BSON_INT32_MAX) {\n      // Set int type 32 bits or less\n      buffer[index++] = constants.BSON_DATA_INT;\n      // Number of written bytes\n      const numberOfWrittenBytes = !isArray\n        ? buffer.write(key, index, 'utf8')\n        : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      // Write the int value\n      buffer[index++] = value & 0xff;\n      buffer[index++] = (value >> 8) & 0xff;\n      buffer[index++] = (value >> 16) & 0xff;\n      buffer[index++] = (value >> 24) & 0xff;\n    } else if (value >= constants.JS_INT_MIN && value <= constants.JS_INT_MAX) {\n      // Encode as double\n      buffer[index++] = constants.BSON_DATA_NUMBER;\n      // Number of written bytes\n      const numberOfWrittenBytes = !isArray\n        ? buffer.write(key, index, 'utf8')\n        : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      // Write float\n      writeIEEE754(buffer, value, index, 'little', 52, 8);\n      // Ajust index\n      index = index + 8;\n    } else {\n      // Set long type\n      buffer[index++] = constants.BSON_DATA_LONG;\n      // Number of written bytes\n      const numberOfWrittenBytes = !isArray\n        ? buffer.write(key, index, 'utf8')\n        : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      const longVal = Long.fromNumber(value);\n      const lowBits = longVal.getLowBits();\n      const highBits = longVal.getHighBits();\n      // Encode low bits\n      buffer[index++] = lowBits & 0xff;\n      buffer[index++] = (lowBits >> 8) & 0xff;\n      buffer[index++] = (lowBits >> 16) & 0xff;\n      buffer[index++] = (lowBits >> 24) & 0xff;\n      // Encode high bits\n      buffer[index++] = highBits & 0xff;\n      buffer[index++] = (highBits >> 8) & 0xff;\n      buffer[index++] = (highBits >> 16) & 0xff;\n      buffer[index++] = (highBits >> 24) & 0xff;\n    }\n  } else {\n    // Encode as double\n    buffer[index++] = constants.BSON_DATA_NUMBER;\n    // Number of written bytes\n    const numberOfWrittenBytes = !isArray\n      ? buffer.write(key, index, 'utf8')\n      : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    // Write float\n    writeIEEE754(buffer, value, index, 'little', 52, 8);\n    // Ajust index\n    index = index + 8;\n  }\n\n  return index;\n}\n\nfunction serializeNull(buffer, key, value, index, isArray) {\n  // Set long type\n  buffer[index++] = constants.BSON_DATA_NULL;\n\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n}\n\nfunction serializeBoolean(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_BOOLEAN;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Encode the boolean value\n  buffer[index++] = value ? 1 : 0;\n  return index;\n}\n\nfunction serializeDate(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_DATE;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the date\n  const dateInMilis = Long.fromNumber(value.getTime());\n  const lowBits = dateInMilis.getLowBits();\n  const highBits = dateInMilis.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n}\n\nfunction serializeRegExp(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_REGEXP;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  if (value.source && value.source.match(regexp) != null) {\n    throw Error('value ' + value.source + ' must not contain null bytes');\n  }\n  // Adjust the index\n  index = index + buffer.write(value.source, index, 'utf8');\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the parameters\n  if (value.ignoreCase) buffer[index++] = 0x69; // i\n  if (value.global) buffer[index++] = 0x73; // s\n  if (value.multiline) buffer[index++] = 0x6d; // m\n\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nfunction serializeBSONRegExp(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_REGEXP;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Check the pattern for 0 bytes\n  if (value.pattern.match(regexp) != null) {\n    // The BSON spec doesn't allow keys with null bytes because keys are\n    // null-terminated.\n    throw Error('pattern ' + value.pattern + ' must not contain null bytes');\n  }\n\n  // Adjust the index\n  index = index + buffer.write(value.pattern, index, 'utf8');\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the options\n  index =\n    index +\n    buffer.write(\n      value.options\n        .split('')\n        .sort()\n        .join(''),\n      index,\n      'utf8'\n    );\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nfunction serializeMinMax(buffer, key, value, index, isArray) {\n  // Write the type of either min or max key\n  if (value === null) {\n    buffer[index++] = constants.BSON_DATA_NULL;\n  } else if (value._bsontype === 'MinKey') {\n    buffer[index++] = constants.BSON_DATA_MIN_KEY;\n  } else {\n    buffer[index++] = constants.BSON_DATA_MAX_KEY;\n  }\n\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n}\n\nfunction serializeObjectId(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_OID;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the objectId into the shared buffer\n  if (typeof value.id === 'string') {\n    buffer.write(value.id, index, 'binary');\n  } else if (value.id && value.id.copy) {\n    value.id.copy(buffer, index, 0, 12);\n  } else {\n    throw new TypeError('object [' + JSON.stringify(value) + '] is not a valid ObjectId');\n  }\n\n  // Ajust index\n  return index + 12;\n}\n\nfunction serializeBuffer(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_BINARY;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Get size of the buffer (current write point)\n  const size = value.length;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the default subtype\n  buffer[index++] = constants.BSON_BINARY_SUBTYPE_DEFAULT;\n  // Copy the content form the binary field to the buffer\n  value.copy(buffer, index, 0, size);\n  // Adjust the index\n  index = index + size;\n  return index;\n}\n\nfunction serializeObject(\n  buffer,\n  key,\n  value,\n  index,\n  checkKeys,\n  depth,\n  serializeFunctions,\n  ignoreUndefined,\n  isArray,\n  path\n) {\n  for (let i = 0; i < path.length; i++) {\n    if (path[i] === value) throw new Error('cyclic dependency detected');\n  }\n\n  // Push value to stack\n  path.push(value);\n  // Write the type\n  buffer[index++] = Array.isArray(value) ? constants.BSON_DATA_ARRAY : constants.BSON_DATA_OBJECT;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  const endIndex = serializeInto(\n    buffer,\n    value,\n    checkKeys,\n    index,\n    depth + 1,\n    serializeFunctions,\n    ignoreUndefined,\n    path\n  );\n  // Pop stack\n  path.pop();\n  return endIndex;\n}\n\nfunction serializeDecimal128(buffer, key, value, index, isArray) {\n  buffer[index++] = constants.BSON_DATA_DECIMAL128;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the data from the value\n  value.bytes.copy(buffer, index, 0, 16);\n  return index + 16;\n}\n\nfunction serializeLong(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] =\n    value._bsontype === 'Long' ? constants.BSON_DATA_LONG : constants.BSON_DATA_TIMESTAMP;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the date\n  const lowBits = value.getLowBits();\n  const highBits = value.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n}\n\nfunction serializeInt32(buffer, key, value, index, isArray) {\n  // Set int type 32 bits or less\n  buffer[index++] = constants.BSON_DATA_INT;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the int value\n  buffer[index++] = value & 0xff;\n  buffer[index++] = (value >> 8) & 0xff;\n  buffer[index++] = (value >> 16) & 0xff;\n  buffer[index++] = (value >> 24) & 0xff;\n  return index;\n}\n\nfunction serializeDouble(buffer, key, value, index, isArray) {\n  // Encode as double\n  buffer[index++] = constants.BSON_DATA_NUMBER;\n\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write float\n  writeIEEE754(buffer, value.value, index, 'little', 52, 8);\n\n  // Adjust index\n  index = index + 8;\n  return index;\n}\n\nfunction serializeFunction(buffer, key, value, index, checkKeys, depth, isArray) {\n  buffer[index++] = constants.BSON_DATA_CODE;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Function string\n  const functionString = normalizedFunctionString(value);\n\n  // Write the string\n  const size = buffer.write(functionString, index + 4, 'utf8') + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n}\n\nfunction serializeCode(\n  buffer,\n  key,\n  value,\n  index,\n  checkKeys,\n  depth,\n  serializeFunctions,\n  ignoreUndefined,\n  isArray\n) {\n  if (value.scope && typeof value.scope === 'object') {\n    // Write the type\n    buffer[index++] = constants.BSON_DATA_CODE_W_SCOPE;\n    // Number of written bytes\n    const numberOfWrittenBytes = !isArray\n      ? buffer.write(key, index, 'utf8')\n      : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n\n    // Starting index\n    let startIndex = index;\n\n    // Serialize the function\n    // Get the function string\n    const functionString = typeof value.code === 'string' ? value.code : value.code.toString();\n    // Index adjustment\n    index = index + 4;\n    // Write string into buffer\n    const codeSize = buffer.write(functionString, index + 4, 'utf8') + 1;\n    // Write the size of the string to buffer\n    buffer[index] = codeSize & 0xff;\n    buffer[index + 1] = (codeSize >> 8) & 0xff;\n    buffer[index + 2] = (codeSize >> 16) & 0xff;\n    buffer[index + 3] = (codeSize >> 24) & 0xff;\n    // Write end 0\n    buffer[index + 4 + codeSize - 1] = 0;\n    // Write the\n    index = index + codeSize + 4;\n\n    //\n    // Serialize the scope value\n    const endIndex = serializeInto(\n      buffer,\n      value.scope,\n      checkKeys,\n      index,\n      depth + 1,\n      serializeFunctions,\n      ignoreUndefined\n    );\n    index = endIndex - 1;\n\n    // Writ the total\n    const totalSize = endIndex - startIndex;\n\n    // Write the total size of the object\n    buffer[startIndex++] = totalSize & 0xff;\n    buffer[startIndex++] = (totalSize >> 8) & 0xff;\n    buffer[startIndex++] = (totalSize >> 16) & 0xff;\n    buffer[startIndex++] = (totalSize >> 24) & 0xff;\n    // Write trailing zero\n    buffer[index++] = 0;\n  } else {\n    buffer[index++] = constants.BSON_DATA_CODE;\n    // Number of written bytes\n    const numberOfWrittenBytes = !isArray\n      ? buffer.write(key, index, 'utf8')\n      : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    // Function string\n    const functionString = value.code.toString();\n    // Write the string\n    const size = buffer.write(functionString, index + 4, 'utf8') + 1;\n    // Write the size of the string to buffer\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = (size >> 8) & 0xff;\n    buffer[index + 2] = (size >> 16) & 0xff;\n    buffer[index + 3] = (size >> 24) & 0xff;\n    // Update index\n    index = index + 4 + size - 1;\n    // Write zero\n    buffer[index++] = 0;\n  }\n\n  return index;\n}\n\nfunction serializeBinary(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_BINARY;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Extract the buffer\n  const data = value.value(true);\n  // Calculate size\n  let size = value.position;\n  // Add the deprecated 02 type 4 bytes of size to total\n  if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) size = size + 4;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the subtype to the buffer\n  buffer[index++] = value.sub_type;\n\n  // If we have binary type 2 the 4 first bytes are the size\n  if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n    size = size - 4;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = (size >> 8) & 0xff;\n    buffer[index++] = (size >> 16) & 0xff;\n    buffer[index++] = (size >> 24) & 0xff;\n  }\n\n  // Write the data to the object\n  data.copy(buffer, index, 0, value.position);\n  // Adjust the index\n  index = index + value.position;\n  return index;\n}\n\nfunction serializeSymbol(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_SYMBOL;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the string\n  const size = buffer.write(value.value, index + 4, 'utf8') + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nfunction serializeDBRef(buffer, key, value, index, depth, serializeFunctions, isArray) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_OBJECT;\n  // Number of written bytes\n  const numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  let startIndex = index;\n  let endIndex;\n  let output = {\n    $ref: value.collection || value.namespace, // \"namespace\" was what library 1.x called \"collection\"\n    $id: value.oid\n  };\n\n  if (value.db != null) output.$db = value.db;\n\n  output = Object.assign(output, value.fields);\n  endIndex = serializeInto(buffer, output, false, index, depth + 1, serializeFunctions);\n\n  // Calculate object size\n  const size = endIndex - startIndex;\n  // Write the size\n  buffer[startIndex++] = size & 0xff;\n  buffer[startIndex++] = (size >> 8) & 0xff;\n  buffer[startIndex++] = (size >> 16) & 0xff;\n  buffer[startIndex++] = (size >> 24) & 0xff;\n  // Set index\n  return endIndex;\n}\n\nfunction serializeInto(\n  buffer,\n  object,\n  checkKeys,\n  startingIndex,\n  depth,\n  serializeFunctions,\n  ignoreUndefined,\n  path\n) {\n  startingIndex = startingIndex || 0;\n  path = path || [];\n\n  // Push the object to the path\n  path.push(object);\n\n  // Start place to serialize into\n  let index = startingIndex + 4;\n\n  // Special case isArray\n  if (Array.isArray(object)) {\n    // Get object keys\n    for (let i = 0; i < object.length; i++) {\n      let key = '' + i;\n      let value = object[i];\n\n      // Is there an override value\n      if (value && value.toBSON) {\n        if (typeof value.toBSON !== 'function') throw new TypeError('toBSON is not a function');\n        value = value.toBSON();\n      }\n\n      const type = typeof value;\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index, true);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index, true);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index, true);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index, true);\n      } else if (value === undefined) {\n        index = serializeNull(buffer, key, value, index, true);\n      } else if (value === null) {\n        index = serializeNull(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index, true);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index, true);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index, true);\n      } else if (type === 'object' && value['_bsontype'] == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          true,\n          path\n        );\n      } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Double') {\n        index = serializeDouble(buffer, key, value, index, true);\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          true\n        );\n      } else if (value['_bsontype'] === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          true\n        );\n      } else if (value['_bsontype'] === 'Binary') {\n        index = serializeBinary(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, true);\n      } else if (value['_bsontype'] === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Int32') {\n        index = serializeInt32(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index, true);\n      } else if (typeof value['_bsontype'] !== 'undefined') {\n        throw new TypeError('Unrecognized or invalid _bsontype: ' + value['_bsontype']);\n      }\n    }\n  } else if (object instanceof Map) {\n    const iterator = object.entries();\n    let done = false;\n\n    while (!done) {\n      // Unpack the next entry\n      const entry = iterator.next();\n      done = entry.done;\n      // Are we done, then skip and terminate\n      if (done) continue;\n\n      // Get the entry values\n      const key = entry.value[0];\n      const value = entry.value[1];\n\n      // Check the type of the value\n      const type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if (typeof key === 'string' && !ignoreKeys.has(key)) {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error('key ' + key + ' must not contain null bytes');\n        }\n\n        if (checkKeys) {\n          if ('$' === key[0]) {\n            throw Error('key ' + key + \" must not start with '$'\");\n          } else if (~key.indexOf('.')) {\n            throw Error('key ' + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === null || (value === undefined && ignoreUndefined === false)) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type === 'object' && value['_bsontype'] == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          false,\n          path\n        );\n      } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined\n        );\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      } else if (typeof value['_bsontype'] !== 'undefined') {\n        throw new TypeError('Unrecognized or invalid _bsontype: ' + value['_bsontype']);\n      }\n    }\n  } else {\n    // Did we provide a custom serialization method\n    if (object.toBSON) {\n      if (typeof object.toBSON !== 'function') throw new TypeError('toBSON is not a function');\n      object = object.toBSON();\n      if (object != null && typeof object !== 'object')\n        throw new TypeError('toBSON function did not return an object');\n    }\n\n    // Iterate over all the keys\n    for (let key in object) {\n      let value = object[key];\n      // Is there an override value\n      if (value && value.toBSON) {\n        if (typeof value.toBSON !== 'function') throw new TypeError('toBSON is not a function');\n        value = value.toBSON();\n      }\n\n      // Check the type of the value\n      const type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if (typeof key === 'string' && !ignoreKeys.has(key)) {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error('key ' + key + ' must not contain null bytes');\n        }\n\n        if (checkKeys) {\n          if ('$' === key[0]) {\n            throw Error('key ' + key + \" must not start with '$'\");\n          } else if (~key.indexOf('.')) {\n            throw Error('key ' + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === undefined) {\n        if (ignoreUndefined === false) index = serializeNull(buffer, key, value, index);\n      } else if (value === null) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type === 'object' && value['_bsontype'] == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          false,\n          path\n        );\n      } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined\n        );\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      } else if (typeof value['_bsontype'] !== 'undefined') {\n        throw new TypeError('Unrecognized or invalid _bsontype: ' + value['_bsontype']);\n      }\n    }\n  }\n\n  // Remove the path\n  path.pop();\n\n  // Final padding byte for object\n  buffer[index++] = 0x00;\n\n  // Final size\n  const size = index - startingIndex;\n  // Write the size of the object\n  buffer[startingIndex++] = size & 0xff;\n  buffer[startingIndex++] = (size >> 8) & 0xff;\n  buffer[startingIndex++] = (size >> 16) & 0xff;\n  buffer[startingIndex++] = (size >> 24) & 0xff;\n  return index;\n}\n\nmodule.exports = serializeInto;\n","\n// Copyright (c) 2008, Fair Oaks Labs, Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//  * Redistributions of source code must retain the above copyright notice,\n//    this list of conditions and the following disclaimer.\n//\n//  * Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\n//    may be used to endorse or promote products derived from this software\n//    without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n//\n//\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\n\nfunction readIEEE754(buffer, offset, endian, mLen, nBytes) {\n  let e,\n    m,\n    bBE = endian === 'big',\n    eLen = nBytes * 8 - mLen - 1,\n    eMax = (1 << eLen) - 1,\n    eBias = eMax >> 1,\n    nBits = -7,\n    i = bBE ? 0 : nBytes - 1,\n    d = bBE ? 1 : -1,\n    s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << -nBits) - 1);\n  s >>= -nBits;\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  m = e & ((1 << -nBits) - 1);\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n}\n\nfunction writeIEEE754(buffer, value, offset, endian, mLen, nBytes) {\n  let e,\n    m,\n    c,\n    bBE = endian === 'big',\n    eLen = nBytes * 8 - mLen - 1,\n    eMax = (1 << eLen) - 1,\n    eBias = eMax >> 1,\n    rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,\n    i = bBE ? nBytes - 1 : 0,\n    d = bBE ? -1 : 1,\n    s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  if (isNaN(value)) m = 0;\n\n  while (mLen >= 8) {\n    buffer[offset + i] = m & 0xff;\n    i += d;\n    m /= 256;\n    mLen -= 8;\n  }\n\n  e = (e << mLen) | m;\n\n  if (isNaN(value)) e += 8;\n\n  eLen += mLen;\n\n  while (eLen > 0) {\n    buffer[offset + i] = e & 0xff;\n    i += d;\n    e /= 256;\n    eLen -= 8;\n  }\n\n  buffer[offset + i - d] |= s * 128;\n}\n\nmodule.exports = {\n  readIEEE754,\n  writeIEEE754\n};\n","\n\nconst Buffer = require('buffer').Buffer;\nconst Binary = require('../binary');\nconst normalizedFunctionString = require('./utils').normalizedFunctionString;\nconst constants = require('../constants');\n\n// To ensure that 0.4 of node works correctly\nfunction isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n}\n\nfunction calculateObjectSize(object, serializeFunctions, ignoreUndefined) {\n  let totalLength = 4 + 1;\n\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; i++) {\n      totalLength += calculateElement(\n        i.toString(),\n        object[i],\n        serializeFunctions,\n        true,\n        ignoreUndefined\n      );\n    }\n  } else {\n    // If we have toBSON defined, override the current object\n\n    if (object.toBSON) {\n      object = object.toBSON();\n    }\n\n    // Calculate size\n    for (let key in object) {\n      totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);\n    }\n  }\n\n  return totalLength;\n}\n\n/**\n * @ignore\n * @api private\n */\nfunction calculateElement(name, value, serializeFunctions, isArray, ignoreUndefined) {\n  // If we have toBSON defined, override the current object\n  if (value && value.toBSON) {\n    value = value.toBSON();\n  }\n\n  switch (typeof value) {\n    case 'string':\n      return 1 + Buffer.byteLength(name, 'utf8') + 1 + 4 + Buffer.byteLength(value, 'utf8') + 1;\n    case 'number':\n      if (\n        Math.floor(value) === value &&\n        value >= constants.JS_INT_MIN &&\n        value <= constants.JS_INT_MAX\n      ) {\n        if (value >= constants.BSON_INT32_MIN && value <= constants.BSON_INT32_MAX) {\n          // 32 bit\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (4 + 1);\n        } else {\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n        }\n      } else {\n        // 64 bit\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      }\n    case 'undefined':\n      if (isArray || !ignoreUndefined)\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1;\n      return 0;\n    case 'boolean':\n      return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (1 + 1);\n    case 'object':\n      if (value == null || value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1;\n      } else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (12 + 1);\n      } else if (value instanceof Date || isDate(value)) {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (1 + 4 + 1) + value.length\n        );\n      } else if (\n        value['_bsontype'] === 'Long' ||\n        value['_bsontype'] === 'Double' ||\n        value['_bsontype'] === 'Timestamp'\n      ) {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      } else if (value['_bsontype'] === 'Decimal128') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (16 + 1);\n      } else if (value['_bsontype'] === 'Code') {\n        // Calculate size depending on the availability of a scope\n        if (value.scope != null && Object.keys(value.scope).length > 0) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            4 +\n            Buffer.byteLength(value.code.toString(), 'utf8') +\n            1 +\n            calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined)\n          );\n        } else {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            Buffer.byteLength(value.code.toString(), 'utf8') +\n            1\n          );\n        }\n      } else if (value['_bsontype'] === 'Binary') {\n        // Check what kind of subtype we have\n        if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            (value.position + 1 + 4 + 1 + 4)\n          );\n        } else {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (value.position + 1 + 4 + 1)\n          );\n        }\n      } else if (value['_bsontype'] === 'Symbol') {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          Buffer.byteLength(value.value, 'utf8') +\n          4 +\n          1 +\n          1\n        );\n      } else if (value['_bsontype'] === 'DBRef') {\n        // Set up correct object for serialization\n        const ordered_values = Object.assign(\n          {\n            $ref: value.collection,\n            $id: value.oid\n          },\n          value.fields\n        );\n\n        // Add db reference if it exists\n        if (value.db != null) {\n          ordered_values['$db'] = value.db;\n        }\n\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          calculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined)\n        );\n      } else if (\n        value instanceof RegExp ||\n        Object.prototype.toString.call(value) === '[object RegExp]'\n      ) {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          Buffer.byteLength(value.source, 'utf8') +\n          1 +\n          (value.global ? 1 : 0) +\n          (value.ignoreCase ? 1 : 0) +\n          (value.multiline ? 1 : 0) +\n          1\n        );\n      } else if (value['_bsontype'] === 'BSONRegExp') {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          Buffer.byteLength(value.pattern, 'utf8') +\n          1 +\n          Buffer.byteLength(value.options, 'utf8') +\n          1\n        );\n      } else {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          calculateObjectSize(value, serializeFunctions, ignoreUndefined) +\n          1\n        );\n      }\n    case 'function':\n      // WTF for 0.4.X where typeof /someregexp/ === 'function'\n      if (\n        value instanceof RegExp ||\n        Object.prototype.toString.call(value) === '[object RegExp]' ||\n        String.call(value) === '[object RegExp]'\n      ) {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          Buffer.byteLength(value.source, 'utf8') +\n          1 +\n          (value.global ? 1 : 0) +\n          (value.ignoreCase ? 1 : 0) +\n          (value.multiline ? 1 : 0) +\n          1\n        );\n      } else {\n        if (serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            4 +\n            Buffer.byteLength(normalizedFunctionString(value), 'utf8') +\n            1 +\n            calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined)\n          );\n        } else if (serializeFunctions) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            Buffer.byteLength(normalizedFunctionString(value), 'utf8') +\n            1\n          );\n        }\n      }\n  }\n\n  return 0;\n}\n\nmodule.exports = calculateObjectSize;\n","\n\nconst Buffer = require('buffer').Buffer;\n\n/**\n * Makes sure that, if a Uint8Array is passed in, it is wrapped in a Buffer.\n *\n * @param {Buffer|Uint8Array} potentialBuffer The potential buffer\n * @returns {Buffer} the input if potentialBuffer is a buffer, or a buffer that\n * wraps a passed in Uint8Array\n * @throws {TypeError} If anything other than a Buffer or Uint8Array is passed in\n */\nmodule.exports = function ensureBuffer(potentialBuffer) {\n  if (potentialBuffer instanceof Buffer) {\n    return potentialBuffer;\n  }\n\n  if (potentialBuffer instanceof Uint8Array) {\n    return Buffer.from(potentialBuffer.buffer);\n  }\n\n  throw new TypeError('Must use either Buffer or Uint8Array');\n};\n"]}